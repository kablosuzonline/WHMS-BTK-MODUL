<?php
// modules/addons/btkreports/btkreports.php

if (!defined("WHMCS")) {
    die("This file cannot be accessed directly");
}

use WHMCS\Database\Capsule;

// Libs
if (file_exists(__DIR__ . '/lib/NviSoapClient.php')) {
    require_once __DIR__ . '/lib/NviSoapClient.php';
}
if (file_exists(ROOTDIR . '/vendor/autoload.php')) {
    require_once ROOTDIR . '/vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require_once __DIR__ . '/vendor/autoload.php';
}
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx as XlsxWriter;
use PhpOffice\PhpSpreadsheet\Style\Alignment as PhpSpreadsheetAlignment;
use PhpOffice\PhpSpreadsheet\Style\Border as PhpSpreadsheetBorder;
use PhpOffice\PhpSpreadsheet\Style\Fill as PhpSpreadsheetFill;


global $_ADDONLANG, $CONFIG, $adminUsername;

if (isset($_SESSION['adminid']) && (int)$_SESSION['adminid'] > 0) {
    $adminData = Capsule::table('tbladmins')->where('id', (int)$_SESSION['adminid'])->first(['username', 'firstname', 'lastname']);
    if ($adminData) {
        $adminUsername = ($adminData->firstname ?? '') . ' ' . ($adminData->lastname ?? '') . ' (' . ($adminData->username ?? 'N/A') . ')';
    } else {
        $adminUsername = 'AdminID:'.$_SESSION['adminid'];
    }
} else {
    $adminUsername = 'System';
}

if (empty($_ADDONLANG) && file_exists(__DIR__ . '/lang/turkish.php')) {
    require_once __DIR__ . '/lang/turkish.php';
}
if (!isset($_ADDONLANG) || !is_array($_ADDONLANG)) { 
    $_ADDONLANG = [];
    $_ADDONLANG['btkreports_modulename'] = 'BTK Abone Veri Raporlama (Dil Yüklenemedi)';
    $_ADDONLANG['btkreports_config_operator_code_error_format'] = 'Operatör kodu 3 haneli bir sayı olmalıdır!';
    $_ADDONLANG['btkreports_config_operator_code_error_required'] = 'Operatör kodu boş bırakılamaz!';
    $_ADDONLANG['btkreports_config_ftp_host_error_required'] = 'FTP Sunucu Adresi boş bırakılamaz!';
    $_ADDONLANG['btkreports_config_ftp_username_error_required'] = 'FTP Kullanıcı Adı boş bırakılamaz!';
    $_ADDONLANG['btkreports_config_save_success'] = 'Ayarlar başarıyla kaydedildi.'; // Gülücük kaldırıldı
    $_ADDONLANG['btkreports_ftp_status_checking'] = 'FTP durumu kontrol ediliyor...';
}

if (!function_exists('btkreports_config')) {
    function btkreports_config() { global $_ADDONLANG; $moduleName = $_ADDONLANG['btkreports_modulename'] ?? 'BTK Abone Veri Raporlama'; return [ 'name' => $moduleName, 'description' => $_ADDONLANG['btkreports_module_description'] ?? 'BTK tarafından istenen abone, hizmet ve personel verilerini raporlayan WHMCS eklenti modülü.', 'version' => '1.0.28', 'author' => 'Sen ve Ben Projesi', 'language' => 'turkish', 'fields' => [], ]; }
}

if (!function_exists('_btkSanitizeString')) {
    function _btkSanitizeString($value, $removeNonNumeric = false) { $trimmed = trim((string)$value); if ($removeNonNumeric) { $trimmed = preg_replace('/[^\d]/', '', $trimmed); } return htmlspecialchars($trimmed, ENT_QUOTES, 'UTF-8'); }
}
if (!function_exists('_btkSanitizeEmail')) {
    function _btkSanitizeEmail($value) { return filter_var(trim((string)$value), FILTER_SANITIZE_EMAIL); }
}
if (!function_exists('btkreports_get_admin_folder_name')) {
    function btkreports_get_admin_folder_name() { global $CONFIG; $adminFolderName = $CONFIG['AdminFolder'] ?? 'admin'; if (class_exists('\WHMCS\Admin\Directory') && method_exists('\WHMCS\Admin\Directory', 'getAdminFolderName')) { $adminFolderName = \WHMCS\Admin\Directory::getAdminFolderName(); } return $adminFolderName; }
}
if (!function_exists('btkreports_get_current_admin_username')) {
    function btkreports_get_current_admin_username() { global $adminUsername; return $adminUsername; }
}
if (!function_exists('btkreports_log_activity')) {
    function btkreports_log_activity($description, $clientId = null, $serviceId = null, $logType = 'INFO') { global $adminUsername; try { $userId = null; if (isset($_SESSION['adminid']) && !empty($_SESSION['adminid'])) { $userId = (int)$_SESSION['adminid']; } $ipAddress = $_SERVER['REMOTE_ADDR'] ?? 'Unknown'; if (function_exists('getremoteip')) { $ipAddress = getremoteip(); } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ipAddress = $_SERVER['HTTP_X_FORWARDED_FOR']; } elseif (!empty($_SERVER['HTTP_CLIENT_IP'])) { $ipAddress = $_SERVER['HTTP_CLIENT_IP']; } if (!Capsule::schema()->hasTable('mod_btk_logs')) { if (function_exists('logActivity')) { logActivity("BTK Module Log Skipped: mod_btk_logs table does not exist. Original log: [{$logType}] {$description}", 0); } else { error_log("BTK Module Log Skipped: mod_btk_logs table does not exist. Original log: [{$logType}] {$description}"); } return; } Capsule::table('mod_btk_logs')->insert([ 'description' => mb_substr($description . " (User: ".$adminUsername.")", 0, 65535), 'user_id' => $userId, 'client_id' => $clientId, 'service_id' => $serviceId, 'ip_address' => $ipAddress, 'log_type' => mb_substr($logType, 0, 50), 'log_time' => date('Y-m-d H:i:s') ]); } catch (Exception $e) { if (function_exists('logActivity')) { logActivity("BTK Module Log Self-Error: Could not write to mod_btk_logs. Original log: [{$logType}] {$description}. DB Error: " . $e->getMessage(), 0); } else { error_log("BTK Module Log Self-Error: Could not write to mod_btk_logs. Original log: [{$logType}] {$description}. DB Error: " . $e->getMessage()); } } }
}
if (!function_exists('btkreports_save_config')) {
    function btkreports_save_config($setting, $value) { try { Capsule::table('mod_btk_config')->updateOrInsert( ['setting' => $setting], ['value' => $value, 'last_updated' => date('Y-m-d H:i:s')] ); } catch (Exception $e) { if (function_exists('btkreports_log_activity')) { btkreports_log_activity("BTK Save Config ERROR: Setting=" . $setting . " - " . $e->getMessage(), 0, null, 'ERROR'); } } }
}
if (!function_exists('btkreports_get_all_config')) {
    function btkreports_get_all_config() { $configData = []; try { if (Capsule::schema()->hasTable('mod_btk_config')) { $configItems = Capsule::table('mod_btk_config')->get(); foreach ($configItems as $item) { $configData[$item->setting] = $item->value; } if (isset($configData['ftp_password']) && !empty($configData['ftp_password'])) { try { $configData['ftp_password_decrypted'] = decrypt($configData['ftp_password']); } catch (Exception $e) { $configData['ftp_password_decrypted'] = ''; if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Get Config: FTP password decryption failed.", 0, null, "WARNING"); } } else { $configData['ftp_password_decrypted'] = ''; } } } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Get All Config ERROR: " . $e->getMessage(), 0, null, 'ERROR'); } $configData['operator_code'] = $configData['operator_code'] ?? ''; $configData['send_empty_file'] = $configData['send_empty_file'] ?? '0'; return $configData; }
}

if (!function_exists('btkreports_activate')) { function btkreports_activate() { global $_ADDONLANG; $logPrefix = "BTK Reports Activation: "; try { $sqlInstallPath = __DIR__ . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR . 'install.sql'; $initialDataSqlPath = __DIR__ . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR . 'initial_reference_data.sql'; if (file_exists($sqlInstallPath)) { $sqlQueries = file_get_contents($sqlInstallPath); $sqlStatements = explode(';', $sqlQueries); foreach ($sqlStatements as $statement) { $statement = trim($statement); if (!empty($statement)) { Capsule::statement($statement); } } if (function_exists('btkreports_log_activity')) btkreports_log_activity($logPrefix . "install.sql executed successfully.", null, null, 'INFO_SETUP'); } else { if (function_exists('logActivity')) logActivity($logPrefix . "ERROR: install.sql not found.", 0); return ['status' => 'error', 'description' => ($_ADDONLANG['btkreports_error_install_sql_not_found'] ?? 'Kurulum SQL dosyası bulunamadı: install.sql')]; } if (file_exists($initialDataSqlPath)) { $sqlQueries = file_get_contents($initialDataSqlPath); $sqlStatements = explode(';', $sqlQueries); foreach ($sqlStatements as $statement) { $statement = trim($statement); if (!empty($statement)) { Capsule::statement($statement); } } if (function_exists('btkreports_log_activity')) btkreports_log_activity($logPrefix . "initial_reference_data.sql executed successfully.", null, null, 'INFO_SETUP'); } else { if (function_exists('btkreports_log_activity')) btkreports_log_activity($logPrefix . "WARNING: initial_reference_data.sql not found.", null, null, 'WARNING_SETUP'); } $new_version = btkreports_config()['version']; Capsule::table('mod_btk_config')->updateOrInsert(['setting' => 'module_version'], ['value' => $new_version, 'last_updated' => date('Y-m-d H:i:s')]); $defaultSettings = ['operator_name' => '', 'operator_code' => '', 'operator_unvani' => '', 'active_auth_types' => '[]', 'ftp_host' => '', 'ftp_username' => '', 'ftp_password' => '', 'ftp_rehber_path' => '/REHBER/', 'ftp_hareket_path' => '/HAREKET/', 'personel_ftp_path' => '/PERSONEL/', 'send_empty_file' => '0', 'delete_data_on_uninstall' => '0', 'last_config_update' => date('Y-m-d H:i:s')]; foreach($defaultSettings as $key => $value){ if (!Capsule::table('mod_btk_config')->where('setting', $key)->exists()) { Capsule::table('mod_btk_config')->insert(['setting' => $key, 'value' => $value]); } } if (function_exists('btkreports_sync_admins_to_personel')) { btkreports_sync_admins_to_personel(); } if (function_exists('btkreports_log_activity')) btkreports_log_activity($logPrefix . "Activation completed. Version: " . $new_version, null, null, 'SUCCESS_SETUP'); return ['status' => 'success', 'description' => ($_ADDONLANG['btkreports_activate_success'] ?? 'BTK Raporlama Modülü başarıyla aktive edildi. Lütfen modül ayarlarını yapılandırın.')]; } catch (Exception $e) { $activationErrorMsg = $logPrefix . "ERROR during activation: " . $e->getMessage() . " Trace: " . $e->getTraceAsString(); if (function_exists('btkreports_log_activity') && Capsule::schema()->hasTable('mod_btk_logs')) { btkreports_log_activity($activationErrorMsg, null, null, 'FATAL_ERROR_SETUP'); } else { logActivity($activationErrorMsg, 0); error_log($activationErrorMsg); } return ['status' => 'error', 'description' => ($_ADDONLANG['btkreports_activate_error'] ?? 'Modül aktivasyonu sırasında bir hata oluştu: ') . $e->getMessage()]; } } }
if (!function_exists('btkreports_deactivate')) { function btkreports_deactivate() { global $_ADDONLANG; $logPrefix = "BTK Reports Deactivation: "; $configData = btkreports_get_all_config(); $deleteData = $configData['delete_data_on_uninstall'] ?? '0'; if ($deleteData === '1') { try { $tablesToDrop = ['mod_btk_logs', 'mod_btk_hareketler', 'mod_btk_product_mappings', 'mod_btk_services', 'mod_btk_clients', 'mod_btk_personel', 'mod_btk_adresler', 'mod_btk_mahalleler', 'mod_btk_ilceler', 'mod_btk_iller', 'mod_btk_musteri_hareket_kodlari', 'mod_btk_hat_durum_kodlari', 'mod_btk_kimlik_aidiyeti', 'mod_btk_kimlik_tipleri', 'mod_btk_musteri_tipleri', 'mod_btk_hizmet_tipleri', 'mod_btk_yetki_turleri', 'mod_btk_config', 'mod_btk_nvi_cache']; foreach ($tablesToDrop as $table) { Capsule::schema()->dropIfExists($table); } $message = $_ADDONLANG['btkreports_deactivate_success_deleted'] ?? 'BTK Raporlama Modülü başarıyla deaktive edildi ve ilgili tüm tablolar silindi.'; if (function_exists('logActivity')) logActivity($logPrefix . "Deactivation completed. All tables dropped.", 0); } catch (Exception $e) { $message = ($_ADDONLANG['btkreports_deactivate_error_deleting_tables'] ?? 'Modül deaktive edildi ancak tablolar silinirken bir hata oluştu: ') . $e->getMessage(); if (function_exists('logActivity')) logActivity($logPrefix . "Error dropping tables: " . $e->getMessage(), 0); return ['status' => 'error', 'description' => $message]; } } else { $message = $_ADDONLANG['btkreports_deactivate_success_kept'] ?? 'BTK Raporlama Modülü başarıyla deaktive edildi. Veritabanı tablolarınız korunmuştur.'; if (function_exists('btkreports_log_activity') && Capsule::schema()->hasTable('mod_btk_logs')) { btkreports_log_activity($logPrefix . "Deactivation completed. Tables were not dropped.", 0, null, 'INFO_SETUP'); } } return ['status' => 'success', 'description' => $message]; } }
if (!function_exists('btkreports_upgrade')) { function btkreports_upgrade($vars) { $newVersion = $vars['version']; $currentDbVersion = ''; try { if (Capsule::schema()->hasTable('mod_btk_config')) { $currentDbVersion = Capsule::table('mod_btk_config')->where('setting', 'module_version')->value('value'); } } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade: Could not get current DB version. " . $e->getMessage(), 0, null, 'ERROR_SETUP'); } if (empty($currentDbVersion)) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade: No current version found in DB, setting to " . $newVersion, 0, null, 'INFO_SETUP'); } else if (version_compare($currentDbVersion, $newVersion, '<')) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade: Upgrading database from " . $currentDbVersion . " to " . $newVersion, 0, null, 'INFO_SETUP'); if (version_compare($currentDbVersion, '1.0.20', '<')) { if (Capsule::schema()->hasTable('mod_btk_config')) { if (!Capsule::table('mod_btk_config')->where('setting', 'operator_unvani')->exists()) { Capsule::table('mod_btk_config')->insert(['setting' => 'operator_unvani', 'value' => '']); } if (!Capsule::table('mod_btk_config')->where('setting', 'personel_ftp_path')->exists()) { Capsule::table('mod_btk_config')->insert(['setting' => 'personel_ftp_path', 'value' => '/PERSONEL/']); } if (!Capsule::table('mod_btk_config')->where('setting', 'delete_data_on_uninstall')->exists()) { Capsule::table('mod_btk_config')->insert(['setting' => 'delete_data_on_uninstall', 'value' => '0']); } } } if (version_compare($currentDbVersion, '1.0.30', '<')) { if (!Capsule::schema()->hasTable('mod_btk_nvi_cache')) { try { Capsule::statement("CREATE TABLE `mod_btk_nvi_cache` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY, `sorgu_tipi` enum('TCKN','YKN') NOT NULL, `sorgu_parametreleri` varchar(512) NOT NULL COMMENT 'JSON olarak sorgu parametreleri', `sonuc` tinyint(1) DEFAULT NULL COMMENT 'Doğrulama sonucu: 1=Başarılı, 0=Başarısız, NULL=Hata/Bilinmiyor', `yanit_mesaji` text DEFAULT NULL COMMENT 'NVI servisinden dönen mesaj veya hata detayı', `son_sorgu_tarihi` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(), UNIQUE KEY `unique_sorgu_v30` (`sorgu_tipi`,`sorgu_parametreleri`(255)) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;"); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade: mod_btk_nvi_cache table created.", 0, null, 'INFO_SETUP'); } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade ERROR: Could not create mod_btk_nvi_cache table - " . $e->getMessage(), 0, null, 'ERROR_SETUP'); } } } } else { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Reports Upgrade: Already up to date or newer. DB version: " . $currentDbVersion . ", File version: " . $newVersion, 0, null, 'INFO_SETUP'); } Capsule::table('mod_btk_config')->updateOrInsert(['setting' => 'module_version'], ['value' => $newVersion, 'last_updated' => date('Y-m-d H:i:s')]); } }

if (!function_exists('btkreports_sync_admins_to_personel')) { function btkreports_sync_admins_to_personel() { global $_ADDONLANG; if (!Capsule::schema()->hasTable('tbladmins') || !Capsule::schema()->hasTable('mod_btk_personel')) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel Senkronizasyonu: Gerekli tablolar bulunamadı.",0,null,'ERROR'); return ['success' => false, 'message' => $_ADDONLANG['btkreports_personnel_sync_error_tables'] ?? 'Gerekli tablolar bulunamadı.']; } $config = btkreports_get_all_config(); $operatorUnvani = $config['operator_unvani'] ?? ($config['operator_name'] ?? ($_ADDONLANG['btkreports_unknown_company'] ?? 'Bilinmeyen Firma')); $syncedCount = 0; $errorCount = 0; $whmcsAdmins = Capsule::table('tbladmins')->where('disabled', 0)->get(); foreach ($whmcsAdmins as $admin) { $existingPersonel = Capsule::table('mod_btk_personel')->where('admin_id', $admin->id)->first(); $personelData = ['admin_id' => $admin->id, 'firma_adi' => $operatorUnvani, 'adi' => $admin->firstname, 'soyadi' => $admin->lastname, 'e_posta_adresi' => $admin->email, 'updated_at' => date('Y-m-d H:i:s')]; if (!$existingPersonel) { try { $personelData['btk_listesine_eklensin'] = true; $personelData['created_at'] = date('Y-m-d H:i:s'); Capsule::table('mod_btk_personel')->insert($personelData); $syncedCount++; if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel Senkronizasyonu: Admin ID {$admin->id} ({$admin->username}) mod_btk_personel tablosuna eklendi.",0,null,'INFO'); } catch (Exception $e) { $errorCount++; if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel Senkronizasyonu HATA: Admin ID {$admin->id} eklenirken - " . $e->getMessage(),0,null,'ERROR'); } } else { try { Capsule::table('mod_btk_personel')->where('admin_id', $admin->id)->update(['firma_adi' => $operatorUnvani, 'adi' => $admin->firstname, 'soyadi' => $admin->lastname, 'e_posta_adresi' => $admin->email, 'updated_at' => date('Y-m-d H:i:s')]); } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel Senkronizasyonu HATA: Admin ID {$admin->id} güncellenirken - " . $e->getMessage(),0,null,'ERROR'); } } } $message = sprintf(($_ADDONLANG['btkreports_personnel_sync_completed'] ?? '%s yeni personel eklendi/güncellendi.'), $syncedCount); if ($errorCount > 0) { $message .= " " . sprintf(($_ADDONLANG['btkreports_personnel_sync_errors_occurred'] ?? '%s personel işlenirken hata oluştu.'), $errorCount); } if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel Senkronizasyonu tamamlandı: " . $message,0,null,'INFO'); return ['success' => $errorCount == 0, 'message' => $message, 'synced' => $syncedCount, 'errors' => $errorCount]; } }

if (!function_exists('btkreports_AdminAreaClientSummaryPageTab')) { function btkreports_AdminAreaClientSummaryPageTab($vars, $smartyInstance = null, $modulelink_param = null) { global $_ADDONLANG, $CONFIG; $clientId = (int)$vars['userid']; if (!$clientId) return ''; $smarty = $smartyInstance ?: new Smarty(); if (!$smartyInstance) { $templateDir = __DIR__ . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR; $smarty->setTemplateDir($templateDir); $smarty->setCompileDir(isset($GLOBALS['templates_compiledir']) ? $GLOBALS['templates_compiledir'] : ($GLOBALS['smarty'] ? $GLOBALS['smarty']->getCompileDir() : sys_get_temp_dir())); $smarty->assign('_ADDONLANG', $_ADDONLANG); } $adminFolderName = btkreports_get_admin_folder_name(); $modulelink = $modulelink_param ?: (rtrim($CONFIG['SystemURL'], '/') . '/' . $adminFolderName . '/addonmodules.php?module=btkreports'); $clientWhmcs = Capsule::table('tblclients')->where('id', $clientId)->first(); $btkClientData = Capsule::table('mod_btk_clients')->where('client_id', $clientId)->first(); $yerlesimAdresi = null; if ($btkClientData && $btkClientData->yerlesim_adresi_id) { $yerlesimAdresi = Capsule::table('mod_btk_adresler')->where('id', $btkClientData->yerlesim_adresi_id)->first(); } $kurumAdresi = null; if ($btkClientData && $btkClientData->kurum_adresi_id) { $kurumAdresi = Capsule::table('mod_btk_adresler')->where('id', $btkClientData->kurum_adresi_id)->first(); } $smarty->assign('client', (array)$clientWhmcs); $smarty->assign('btkClientData', $btkClientData ? (array)$btkClientData : []); $smarty->assign('yerlesimAdresi', $yerlesimAdresi ? (array)$yerlesimAdresi : []); $smarty->assign('kurumAdresi', $kurumAdresi ? (array)$kurumAdresi : []); $smarty->assign('modulelink', $modulelink); $smarty->assign('csrfToken', function_exists('generate_token') ? generate_token('plain') : ''); $nviUniqueTokenName = 'btk_nvi_csrf_client_' . substr(md5(uniqid(rand(), true)), 0, 10); $_SESSION[$nviUniqueTokenName] = function_exists('generate_token') ? generate_token('plain') : md5(uniqid(rand(), true) . session_id()); $smarty->assign('nviCsrfTokenName', $nviUniqueTokenName); $smarty->assign('nviCsrfTokenValue', $_SESSION[$nviUniqueTokenName]); $smarty->assign('musteriTipleri', Capsule::table('mod_btk_musteri_tipleri')->orderBy('deger_aciklama')->get()); $smarty->assign('kimlikTipleri', Capsule::table('mod_btk_kimlik_tipleri')->orderBy('deger_aciklama')->get()); $smarty->assign('kimlikAidiyetleri', Capsule::table('mod_btk_kimlik_aidiyeti')->orderBy('deger_aciklama')->get()); $smarty->assign('iller', Capsule::table('mod_btk_iller')->orderBy('il_adi')->get()); if(isset($_GET['btktabaction']) && $_GET['btktabaction'] === 'success' && isset($_GET['message'])){ $smarty->assign('successMessage', _btkSanitizeString($_GET['message'])); } if(isset($_GET['btktabaction']) && $_GET['btktabaction'] === 'error' && isset($_GET['message'])){ $smarty->assign('errorMessage', _btkSanitizeString($_GET['message'])); } if (!$smartyInstance) { try { return ['BTK Bilgileri' => $smarty->fetch('client_details.tpl')]; } catch (SmartyException $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Client Tab Smarty ERROR (hook): " . $e->getMessage(), $clientId); return ['BTK Bilgileri' => "Şablon yüklenirken hata: " . htmlspecialchars($e->getMessage())]; } } else { try { $smarty->display('client_details.tpl'); } catch (SmartyException $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Client Tab Smarty ERROR (output): " . $e->getMessage(), $clientId); echo "Şablon yüklenirken bir hata oluştu: " . htmlspecialchars($e->getMessage()); } } return ''; } }
if (!function_exists('btkreports_AdminAreaViewProductDetailsPage')) { function btkreports_AdminAreaViewProductDetailsPage($vars, $smartyInstance = null, $modulelink_param = null) { global $_ADDONLANG, $CONFIG; $serviceId = (int)$vars['serviceid']; $clientId = (int)$vars['userid']; if (!$serviceId || !$clientId) return ''; $smarty = $smartyInstance ?: new Smarty(); if (!$smartyInstance) { $templateDir = __DIR__ . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR; $smarty->setTemplateDir($templateDir); $smarty->setCompileDir(isset($GLOBALS['templates_compiledir']) ? $GLOBALS['templates_compiledir'] : ($GLOBALS['smarty'] ? $GLOBALS['smarty']->getCompileDir() : sys_get_temp_dir())); $smarty->assign('_ADDONLANG', $_ADDONLANG); } $adminFolderName = btkreports_get_admin_folder_name(); $modulelink = $modulelink_param ?: (rtrim($CONFIG['SystemURL'], '/') . '/' . $adminFolderName . '/addonmodules.php?module=btkreports'); $serviceWhmcs = Capsule::table('tblhosting')->where('id', $serviceId)->first(); $btkServiceData = Capsule::table('mod_btk_services')->where('service_id', $serviceId)->first(); $tesisAdresi = null; if ($btkServiceData && $btkServiceData->tesis_adresi_id) { $tesisAdresi = Capsule::table('mod_btk_adresler')->where('id', $btkServiceData->tesis_adresi_id)->first(); } $btkClientData = Capsule::table('mod_btk_clients')->where('client_id', $clientId)->first(['yerlesim_adresi_id']); $smarty->assign('service', (array)$serviceWhmcs); $smarty->assign('btkServiceData', $btkServiceData ? (array)$btkServiceData : []); $smarty->assign('tesisAdresi', $tesisAdresi ? (array)$tesisAdresi : []); $smarty->assign('clientYerlesimAdresiId', $btkClientData ? $btkClientData->yerlesim_adresi_id : null); $smarty->assign('modulelink', $modulelink); $smarty->assign('csrfToken', function_exists('generate_token') ? generate_token('plain') : ''); $smarty->assign('clientId', $clientId); $smarty->assign('hatDurumKodlari', Capsule::table('mod_btk_hat_durum_kodlari')->orderBy('durum_adi')->get()); $configDataCurrent = btkreports_get_all_config(); $activeAuthTypes = $configDataCurrent['active_auth_types'] ?? []; if (!is_array($activeAuthTypes)) $activeAuthTypes = json_decode($activeAuthTypes, true) ?: []; $smarty->assign('availableYetkiTurleri', Capsule::table('mod_btk_yetki_turleri')->whereIn('yetki_kodu', $activeAuthTypes)->orderBy('yetki_adi')->get()); $allHizmetTipleri = Capsule::table('mod_btk_hizmet_tipleri')->orderBy('deger_aciklama')->get(); $hizmetTipleriByYetkiJsonForService = []; foreach($allHizmetTipleri as $ht){ $assignedYetkiler = !empty($ht->yetki_turu_kodu) ? explode(',', $ht->yetki_turu_kodu) : $activeAuthTypes; foreach($assignedYetkiler as $yetkiKodu){ $yetkiKodu = trim($yetkiKodu); if(!in_array($yetkiKodu, $activeAuthTypes) && !empty($ht->yetki_turu_kodu)) continue; if(!isset($hizmetTipleriByYetkiJsonForService[$yetkiKodu])){ $hizmetTipleriByYetkiJsonForService[$yetkiKodu] = []; } $hizmetTipleriByYetkiJsonForService[$yetkiKodu][] = ['hizmet_turu' => $ht->hizmet_turu, 'deger_aciklama' => $ht->deger_aciklama]; } } $smarty->assign('allHizmetTipleri', $allHizmetTipleri); $smarty->assign('hizmetTipleriByYetkiJsonForService', json_encode($hizmetTipleriByYetkiJsonForService)); $smarty->assign('iller', Capsule::table('mod_btk_iller')->orderBy('il_adi')->get()); if(isset($_GET['btkaction']) && $_GET['btkaction'] === 'success' && isset($_GET['message'])){ $smarty->assign('successMessage', _btkSanitizeString($_GET['message'])); } if(isset($_GET['btkaction']) && $_GET['btkaction'] === 'error' && isset($_GET['message'])){ $smarty->assign('errorMessage', _btkSanitizeString($_GET['message'])); } if (!$smartyInstance) { try { return $smarty->fetch('service_details.tpl'); } catch (SmartyException $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Service Details Smarty ERROR (hook): " . $e->getMessage(), $clientId, $serviceId); return "BTK Hizmet Bilgileri yüklenirken hata: " . htmlspecialchars($e->getMessage()); } } else { try { $smarty->display('service_details.tpl'); } catch (SmartyException $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Service Details Smarty ERROR (output): " . $e->getMessage(), $clientId, $serviceId); echo "Şablon yüklenirken bir hata oluştu: " . htmlspecialchars($e->getMessage()); } } return ''; } }
if (!function_exists('btkreports_test_ftp_connection')) { function btkreports_test_ftp_connection($host, $username, $password, $path, $uploadTestFile = true) { global $_ADDONLANG; if (empty($host) || empty($username)) { return ['success' => false, 'message' => $_ADDONLANG['btkreports_config_ftp_error_hostuser'] ?? 'FTP Host ve Kullanıcı Adı boş olamaz.']; } $conn_id = @ftp_connect($host, 21, 10); if (!$conn_id) { return ['success' => false, 'message' => ($_ADDONLANG['btkreports_ftp_test_fail'] ?? 'FTP Bağlantı Hatası:') . ' ' . ($_ADDONLANG['btkreports_ftp_error_connect'] ?? 'Sunucuya bağlanılamadı.')]; } if (!@ftp_login($conn_id, $username, $password)) { @ftp_close($conn_id); return ['success' => false, 'message' => ($_ADDONLANG['btkreports_ftp_test_fail'] ?? 'FTP Bağlantı Hatası:') . ' ' . ($_ADDONLANG['btkreports_ftp_error_login'] ?? 'Kullanıcı adı veya şifre hatalı.')]; } @ftp_pasv($conn_id, true); $pathTestSuccess = true; if (!empty($path)) { if (!@ftp_chdir($conn_id, $path)) { $currentDir = @ftp_pwd($conn_id); @ftp_close($conn_id); $pathTestSuccess = false; return ['success' => false, 'message' => ($_ADDONLANG['btkreports_ftp_test_fail'] ?? 'FTP Bağlantı Hatası:') . " Klasöre ('" . htmlspecialchars($path) . "') geçilemedi. Mevcut klasör: " . htmlspecialchars($currentDir ?? '')]; } } $message = $_ADDONLANG['btkreports_ftp_test_success'] ?? 'FTP bağlantısı başarılı!'; if($uploadTestFile){ $tempFile = tmpfile(); if ($tempFile === false) { @ftp_close($conn_id); return ['success' => false, 'message' => ($_ADDONLANG['btkreports_ftp_test_error_temp_file'] ?? 'Geçici test dosyası oluşturulamadı.')]; } fwrite($tempFile, "BTK FTP Test - " . date('Y-m-d H:i:s')); fseek($tempFile, 0); $remoteFileName = rtrim($path, '/') . '/btk_ftp_test_' . time() . '.txt'; $uploadSuccess = false; if (@ftp_fput($conn_id, $remoteFileName, $tempFile, FTP_ASCII)) { if(@ftp_delete($conn_id, $remoteFileName)) { $uploadSuccess = true; } } fclose($tempFile); if($uploadSuccess) { $message .= " " . ($_ADDONLANG['btkreports_ftp_test_upload_success'] ?? "Test dosyası başarıyla yüklendi ve silindi."); } else { $message .= " " . ($_ADDONLANG['btkreports_ftp_test_upload_fail'] ?? "Ancak test dosyası yüklenemedi/silinemedi. Yazma izinlerini kontrol edin."); } } @ftp_close($conn_id); return ['success' => true, 'message' => $message]; } }
if (!function_exists('btkreports_save_client_btk_data')) { function btkreports_save_client_btk_data($postData, $clientId) { global $_ADDONLANG; try { $yerlesimAdresId = isset($postData['yerlesim_adresi_id_hidden']) && !empty($postData['yerlesim_adresi_id_hidden']) ? (int)$postData['yerlesim_adresi_id_hidden'] : null; $yerlesimAdresData = [ 'adres_tipi' => 'YERLESIM', 'il_id' => !empty($postData['yerlesim_il_id_client']) ? (int)$postData['yerlesim_il_id_client'] : null, 'ilce_id' => !empty($postData['yerlesim_ilce_id_client']) ? (int)$postData['yerlesim_ilce_id_client'] : null, 'mahalle_id' => !empty($postData['yerlesim_mahalle_id_client']) ? (int)$postData['yerlesim_mahalle_id_client'] : null, 'csbm' => _btkSanitizeString($postData['yerlesim_csbm'] ?? ''), 'site_bina_adi' => _btkSanitizeString($postData['yerlesim_site_bina_adi'] ?? ''), 'dis_kapi_no' => _btkSanitizeString($postData['yerlesim_dis_kapi_no'] ?? ''), 'ic_kapi_no' => _btkSanitizeString($postData['yerlesim_ic_kapi_no'] ?? ''), 'posta_kodu' => _btkSanitizeString($postData['yerlesim_posta_kodu'] ?? ''), 'adres_kodu_uavt' => _btkSanitizeString($postData['yerlesim_adres_kodu_uavt'] ?? ''), ]; $yerlesimAdresData['adres_tam_metin'] = btkreports_format_address_for_report($yerlesimAdresData); if ($yerlesimAdresId) { Capsule::table('mod_btk_adresler')->where('id', $yerlesimAdresId)->update($yerlesimAdresData); } else { if (array_filter(array_intersect_key($yerlesimAdresData, array_flip(['il_id', 'csbm', 'dis_kapi_no'])))) { $yerlesimAdresId = Capsule::table('mod_btk_adresler')->insertGetId($yerlesimAdresData); } } $kurumAdresId = isset($postData['kurum_adresi_id_hidden']) && !empty($postData['kurum_adresi_id_hidden']) ? (int)$postData['kurum_adresi_id_hidden'] : null; $kurumAdresData = []; if (isset($postData['kurum_il_id_client']) && !empty($postData['kurum_il_id_client'])) { $kurumAdresData = ['adres_tipi' => 'KURUM_YETKILI', 'il_id' => !empty($postData['kurum_il_id_client']) ? (int)$postData['kurum_il_id_client'] : null, 'ilce_id' => !empty($postData['kurum_ilce_id_client']) ? (int)$postData['kurum_ilce_id_client'] : null, 'mahalle_id' => !empty($postData['kurum_mahalle_id_client']) ? (int)$postData['kurum_mahalle_id_client'] : null, 'csbm' => _btkSanitizeString($postData['kurum_csbm'] ?? ''), 'site_bina_adi' => _btkSanitizeString($postData['kurum_site_bina_adi'] ?? ''), 'dis_kapi_no' => _btkSanitizeString($postData['kurum_dis_kapi_no'] ?? ''), 'ic_kapi_no' => _btkSanitizeString($postData['kurum_ic_kapi_no'] ?? ''), 'posta_kodu' => _btkSanitizeString($postData['kurum_posta_kodu'] ?? ''), 'adres_kodu_uavt' => _btkSanitizeString($postData['kurum_adres_kodu_uavt'] ?? ''), ]; $kurumAdresData['adres_tam_metin'] = btkreports_format_address_for_report($kurumAdresData); if ($kurumAdresId) { Capsule::table('mod_btk_adresler')->where('id', $kurumAdresId)->update($kurumAdresData); } else { if (array_filter(array_intersect_key($kurumAdresData, array_flip(['il_id', 'csbm', 'dis_kapi_no'])))) { $kurumAdresId = Capsule::table('mod_btk_adresler')->insertGetId($kurumAdresData); } } } $btkClientVeri = [ 'musteri_tipi_kodu' => !empty($postData['musteri_tipi_kodu']) ? _btkSanitizeString($postData['musteri_tipi_kodu']) : null, 'abone_baslangic_tarihi' => !empty($postData['abone_baslangic_tarihi']) ? _btkSanitizeString($postData['abone_baslangic_tarihi']) : null, 'abone_bitis_tarihi' => !empty($postData['abone_bitis_tarihi']) ? _btkSanitizeString($postData['abone_bitis_tarihi']) : null, 'abone_tarife' => _btkSanitizeString($postData['abone_tarife'] ?? ''), 'abone_tc_kimlik_no' => !empty($postData['abone_tc_kimlik_no']) ? _btkSanitizeString(str_replace(' ', '', $postData['abone_tc_kimlik_no'])) : null, 'abone_pasaport_no' => _btkSanitizeString($postData['abone_pasaport_no'] ?? ''), 'abone_unvan' => _btkSanitizeString($postData['abone_unvan'] ?? ''), 'abone_vergi_numarasi' => _btkSanitizeString($postData['abone_vergi_numarasi'] ?? ''), 'abone_mersis_numarasi' => _btkSanitizeString($postData['abone_mersis_numarasi'] ?? ''), 'abone_cinsiyet' => !empty($postData['abone_cinsiyet']) ? _btkSanitizeString($postData['abone_cinsiyet']) : null, 'abone_uyruk_iso_kodu' => _btkSanitizeString($postData['abone_uyruk_iso_kodu'] ?? ''), 'abone_baba_adi' => _btkSanitizeString($postData['abone_baba_adi'] ?? ''), 'abone_ana_adi' => _btkSanitizeString($postData['abone_ana_adi'] ?? ''), 'abone_anne_kizlik_soyadi' => _btkSanitizeString($postData['abone_anne_kizlik_soyadi'] ?? ''), 'abone_dogum_yeri' => _btkSanitizeString($postData['abone_dogum_yeri'] ?? ''), 'abone_dogum_tarihi' => !empty($postData['abone_dogum_tarihi']) ? _btkSanitizeString($postData['abone_dogum_tarihi']) : null, 'abone_meslek' => _btkSanitizeString($postData['abone_meslek'] ?? ''), 'abone_kimlik_cilt_no' => _btkSanitizeString($postData['abone_kimlik_cilt_no'] ?? ''), 'abone_kimlik_kutuk_no' => _btkSanitizeString($postData['abone_kimlik_kutuk_no'] ?? ''), 'abone_kimlik_sayfa_no' => _btkSanitizeString($postData['abone_kimlik_sayfa_no'] ?? ''), 'abone_kimlik_il_id' => !empty($postData['abone_kimlik_il_id_client']) ? (int)$postData['abone_kimlik_il_id_client'] : null, 'abone_kimlik_ilce_id' => !empty($postData['abone_kimlik_ilce_id_client']) ? (int)$postData['abone_kimlik_ilce_id_client'] : null, 'abone_kimlik_mahalle_koy' => _btkSanitizeString($postData['abone_kimlik_mahalle_koy'] ?? ''), 'abone_kimlik_tipi_kodu' => !empty($postData['abone_kimlik_tipi_kodu']) ? _btkSanitizeString($postData['abone_kimlik_tipi_kodu']) : null, 'abone_kimlik_seri_no' => _btkSanitizeString($postData['abone_kimlik_seri_no'] ?? ''), 'abone_kimlik_verildigi_yer' => _btkSanitizeString($postData['abone_kimlik_verildigi_yer'] ?? ''), 'abone_kimlik_verildigi_tarih' => !empty($postData['abone_kimlik_verildigi_tarih']) ? _btkSanitizeString($postData['abone_kimlik_verildigi_tarih']) : null, 'abone_kimlik_aidiyeti_kodu' => !empty($postData['abone_kimlik_aidiyeti_kodu']) ? _btkSanitizeString($postData['abone_kimlik_aidiyeti_kodu']) : null, 'yerlesim_adresi_id' => $yerlesimAdresId, 'irtibat_tel_no_1' => _btkSanitizeString($postData['irtibat_tel_no_1'] ?? ''), 'irtibat_tel_no_2' => _btkSanitizeString($postData['irtibat_tel_no_2'] ?? ''), 'irtibat_email' => _btkSanitizeEmail($postData['irtibat_email'] ?? ''), 'kurum_yetkili_adi' => _btkSanitizeString($postData['kurum_yetkili_adi'] ?? ''), 'kurum_yetkili_soyadi' => _btkSanitizeString($postData['kurum_yetkili_soyadi'] ?? ''), 'kurum_yetkili_tckimlik_no' => _btkSanitizeString($postData['kurum_yetkili_tckimlik_no'] ?? ''), 'kurum_yetkili_telefon' => _btkSanitizeString($postData['kurum_yetkili_telefon'] ?? ''), 'kurum_adresi_id' => $kurumAdresId, 'updated_at' => date('Y-m-d H:i:s'), ]; Capsule::table('mod_btk_clients')->updateOrInsert( ['client_id' => $clientId], array_merge($btkClientVeri, ['created_at' => Capsule::raw('IFNULL(created_at, NOW())')]) ); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Client Data Saved: client_id=" . $clientId, $clientId); return ['success' => true, 'message' => $_ADDONLANG['btkreports_client_save_success'] ?? 'Abone BTK bilgileri başarıyla kaydedildi.']; } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Save Client Data ERROR: client_id=" . $clientId . " - " . $e->getMessage(), $clientId, null, 'ERROR'); return ['success' => false, 'message' => ($_ADDONLANG['btkreports_client_save_error'] ?? 'Abone BTK bilgileri kaydedilirken bir hata oluştu.') . ': ' . $e->getMessage()]; } } }
if (!function_exists('btkreports_save_service_btk_data')) { function btkreports_save_service_btk_data($postData, $serviceId, $clientId) { global $_ADDONLANG; try { $tesisAdresId = isset($postData['tesis_adresi_id_hidden']) && !empty($postData['tesis_adresi_id_hidden']) ? (int)$postData['tesis_adresi_id_hidden'] : null; $tesisAdresiYerlesimleAyni = isset($postData['tesis_adresi_ayni']) ? 1 : 0; if ($tesisAdresiYerlesimleAyni) { $clientBtk = Capsule::table('mod_btk_clients')->where('client_id', $clientId)->first(); if ($clientBtk && $clientBtk->yerlesim_adresi_id) { $yerlesimAdres = Capsule::table('mod_btk_adresler')->where('id', $clientBtk->yerlesim_adresi_id)->first(); if ($yerlesimAdres) { $yeniTesisAdresData = (array)$yerlesimAdres; unset($yeniTesisAdresData['id']); $yeniTesisAdresData['adres_tipi'] = 'TESIS'; if($tesisAdresId && Capsule::table('mod_btk_adresler')->where('id', $tesisAdresId)->value('adres_tipi') === 'TESIS') { Capsule::table('mod_btk_adresler')->where('id', $tesisAdresId)->update($yeniTesisAdresData); } else { $tesisAdresId = Capsule::table('mod_btk_adresler')->insertGetId($yeniTesisAdresData); } } else { $tesisAdresId = null; } } else { $tesisAdresId = null; } } else { $tesisAdresData = [ 'adres_tipi' => 'TESIS', 'il_id' => !empty($postData['tesis_il_id_service']) ? (int)$postData['tesis_il_id_service'] : null, 'ilce_id' => !empty($postData['tesis_ilce_id_service']) ? (int)$postData['tesis_ilce_id_service'] : null, 'mahalle_id' => !empty($postData['tesis_mahalle_id_service']) ? (int)$postData['tesis_mahalle_id_service'] : null, 'csbm' => _btkSanitizeString($postData['tesis_csbm'] ?? ''), 'site_bina_adi' => _btkSanitizeString($postData['tesis_site_bina_adi'] ?? ''), 'dis_kapi_no' => _btkSanitizeString($postData['tesis_dis_kapi_no'] ?? ''), 'ic_kapi_no' => _btkSanitizeString($postData['tesis_ic_kapi_no'] ?? ''), 'posta_kodu' => _btkSanitizeString($postData['tesis_posta_kodu'] ?? ''), 'adres_kodu_uavt' => _btkSanitizeString($postData['tesis_adres_kodu_uavt'] ?? ''), ]; $tesisAdresData['adres_tam_metin'] = btkreports_format_address_for_report($tesisAdresData); if ($tesisAdresId && Capsule::table('mod_btk_adresler')->where('id', $tesisAdresId)->value('adres_tipi') === 'TESIS') { Capsule::table('mod_btk_adresler')->where('id', $tesisAdresId)->update($tesisAdresData); } else { if (array_filter(array_intersect_key($tesisAdresData, array_flip(['il_id', 'csbm', 'dis_kapi_no'])))) { $tesisAdresId = Capsule::table('mod_btk_adresler')->insertGetId($tesisAdresData); } } } $btkServiceVeri = [ 'client_id' => $clientId, 'hat_durum_kodu' => !empty($postData['hat_durum_kodu']) ? _btkSanitizeString($postData['hat_durum_kodu']) : null, 'hat_aciklama' => _btkSanitizeString($postData['hat_aciklama'] ?? ''), 'override_btk_yetki_turu_kodu' => !empty($postData['override_btk_yetki_turu_kodu']) ? _btkSanitizeString($postData['override_btk_yetki_turu_kodu']) : null, 'override_hizmet_tipi_kodu' => !empty($postData['override_hizmet_tipi_kodu']) ? _btkSanitizeString($postData['override_hizmet_tipi_kodu']) : null, 'tesis_adresi_id' => $tesisAdresId, 'tesis_adresi_yerlesimle_ayni' => $tesisAdresiYerlesimleAyni, 'statik_ip' => _btkSanitizeString($postData['statik_ip'] ?? ''), 'iss_hiz_profili' => _btkSanitizeString($postData['iss_hiz_profili'] ?? ''), 'iss_kullanici_adi' => _btkSanitizeString($postData['iss_kullanici_adi'] ?? ''), 'iss_pop_bilgisi' => _btkSanitizeString($postData['iss_pop_bilgisi'] ?? ''), 'aktivasyon_bayi_adi' => _btkSanitizeString($postData['aktivasyon_bayi_adi'] ?? ''), 'aktivasyon_bayi_adresi' => _btkSanitizeString($postData['aktivasyon_bayi_adresi'] ?? ''), 'aktivasyon_kullanici' => _btkSanitizeString($postData['aktivasyon_kullanici'] ?? ''), 'guncelleyen_bayi_adi' => _btkSanitizeString($postData['guncelleyen_bayi_adi'] ?? ''), 'guncelleyen_bayi_adresi' => _btkSanitizeString($postData['guncelleyen_bayi_adresi'] ?? ''), 'guncelleyen_kullanici' => _btkSanitizeString($postData['guncelleyen_kullanici'] ?? ''), 'updated_at' => date('Y-m-d H:i:s'), ]; Capsule::table('mod_btk_services')->updateOrInsert( ['service_id' => $serviceId], array_merge($btkServiceVeri, ['created_at' => Capsule::raw('IFNULL(created_at, NOW())')]) ); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Service Data Saved: service_id=" . $serviceId, $clientId, $serviceId); return ['success' => true, 'message' => $_ADDONLANG['btkreports_service_save_success'] ?? 'Hizmet BTK bilgileri başarıyla kaydedildi.']; } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Save Service Data ERROR: service_id=" . $serviceId . " - " . $e->getMessage(), $clientId, $serviceId, 'ERROR'); return ['success' => false, 'message' => ($_ADDONLANG['btkreports_service_save_error'] ?? 'Hizmet BTK bilgileri kaydedilirken bir hata oluştu.') . ': ' . $e->getMessage()]; } } }
if (!function_exists('btkreports_format_address_for_report')) { function btkreports_format_address_for_report($adresData) { $parts = []; if (!empty($adresData['csbm'])) $parts[] = $adresData['csbm']; if (!empty($adresData['site_bina_adi'])) $parts[] = $adresData['site_bina_adi']; $kapi = ''; if (!empty($adresData['dis_kapi_no'])) $kapi .= "NO:" . $adresData['dis_kapi_no']; if (!empty($adresData['ic_kapi_no'])) $kapi .= (empty($kapi) ? "İÇ KAPI NO:" : " D:") . $adresData['ic_kapi_no']; if (!empty($kapi)) $parts[] = $kapi; $mahalleAdi = ''; if (!empty($adresData['mahalle_id'])) { $mahalle = Capsule::table('mod_btk_mahalleler')->where('id', $adresData['mahalle_id'])->value('mahalle_adi'); if ($mahalle) $mahalleAdi = str_replace([' MAHALLESİ', ' MH'], [' MAH', ' MAH'], mb_strtoupper($mahalle, 'UTF-8')); } if (!empty($mahalleAdi)) $parts[] = $mahalleAdi; $ilceAdi = ''; if (!empty($adresData['ilce_id'])) { $ilce = Capsule::table('mod_btk_ilceler')->where('id', $adresData['ilce_id'])->value('ilce_adi'); if ($ilce) $ilceAdi = mb_strtoupper($ilce, 'UTF-8'); } $ilAdi = ''; if (!empty($adresData['il_id'])) { $il = Capsule::table('mod_btk_iller')->where('id', $adresData['il_id'])->value('il_adi'); if ($il) $ilAdi = mb_strtoupper($il, 'UTF-8'); } $adresMetni = implode(' ', $parts); $adresTam = $adresMetni; if (!empty($ilceAdi)) $adresTam .= (empty($adresTam) ? '' : ' ') . $ilceAdi; if (!empty($ilAdi)) $adresTam .= (empty($adresTam) ? '' : ' ') . $ilAdi; if (!empty($adresData['adres_kodu_uavt']) && $adresData['adres_kodu_uavt'] !== '0' && $adresData['adres_kodu_uavt'] !== '') { $adresMetni = preg_replace('/(NO:(\S+)(\s*D:(\S+))?)/i', '$1 (' . $adresData['adres_kodu_uavt'] . ')', $adresMetni, 1); if(strpos($adresMetni, '(' . $adresData['adres_kodu_uavt'] . ')') === false){ $adresMetni .= ' (' . $adresData['adres_kodu_uavt'] . ')'; } } if (empty(trim($adresMetni))) return trim($adresTam); return trim(str_replace('  ', ' ', $adresMetni)); } }
if (!function_exists('btkreports_generate_rehber_file')) { function btkreports_generate_rehber_file($config) { global $_ADDONLANG; $operatorCode = $config['operator_code'] ?? '000'; $lines = []; $separator = '|;|'; $newLine = "\n"; $clients = Capsule::table('tblclients')->leftJoin('mod_btk_clients', 'tblclients.id', '=', 'mod_btk_clients.client_id')->select('tblclients.id as whmcs_client_id', 'tblclients.firstname', 'tblclients.lastname', 'tblclients.companyname', 'tblclients.email as whmcs_email', 'tblclients.phonenumber as whmcs_phone', 'tblclients.tax_id as whmcs_tax_id', 'tblclients.status as client_status', 'tblclients.country as whmcs_country', 'tblclients.datecreated as client_datecreated', 'mod_btk_clients.*')->get(); if ($clients->isEmpty() && ($config['send_empty_file'] ?? '0') !== '1') { if (function_exists('btkreports_log_activity')) btkreports_log_activity("REHBER Generation: No clients found and send_empty_file is off.", 0, null, "INFO"); return [null, null]; } foreach ($clients as $client) { $services = Capsule::table('tblhosting')->where('userid', $client->whmcs_client_id)->leftJoin('mod_btk_services', 'tblhosting.id', '=', 'mod_btk_services.service_id')->leftJoin('tblproducts', 'tblhosting.packageid', '=', 'tblproducts.id')->leftJoin('mod_btk_product_mappings', 'tblproducts.gid', '=', 'mod_btk_product_mappings.whmcs_product_group_id')->select('tblhosting.id as whmcs_service_id', 'tblhosting.userid as whmcs_user_id_service', 'tblhosting.regdate as service_regdate', 'tblhosting.domainstatus as service_status', 'tblhosting.termination_date as service_termination_date','tblhosting.dedicatedip as service_dedicatedip', 'tblhosting.username as service_username', 'mod_btk_services.*', 'mod_btk_product_mappings.btk_yetki_turu_kodu as mapped_yetki_kodu', 'mod_btk_product_mappings.default_btk_hizmet_tipi_kodu as mapped_hizmet_tipi', 'tblproducts.name as product_name')->get(); if ($services->isEmpty()){ if (($config['send_empty_file'] ?? '0') === '1' && $clients->count() === 1 ) { /* Boş satır mantığı */ } else { continue; } } foreach ($services as $service) { $line = []; $line[] = $operatorCode; $line[] = $client->whmcs_client_id; $line[] = $service->whmcs_service_id; $hatDurum = $service->hat_durum_kodu ?: btkreports_map_whmcs_status_to_btk_hat_durum($service->service_status); $hatDurumKoduAciklama = Capsule::table('mod_btk_hat_durum_kodlari')->where('kod', $hatDurum)->first(); $line[] = $hatDurumKoduAciklama ? $hatDurumKoduAciklama->durum_adi : 'AKTIF'; $line[] = $hatDurum ?: '1'; $line[] = $service->hat_aciklama ?: ($hatDurumKoduAciklama ? mb_strtoupper($hatDurumKoduAciklama->aciklama, 'UTF-8') : 'AKTIF'); $line[] = ''; $line[] = ''; $line[] = ''; $hizmetTipi = $service->override_hizmet_tipi_kodu ?: $service->mapped_hizmet_tipi ?: ''; $line[] = $hizmetTipi; $line[] = $client->musteri_tipi_kodu ?: ''; $aboneBaslangic = $client->abone_baslangic_tarihi ?: ($service->service_regdate ?: $client->client_datecreated); $line[] = $aboneBaslangic ? date('YmdHis', strtotime($aboneBaslangic)) : '00000000000000'; $aboneBitis = null; if (in_array($service->service_status, ['Terminated', 'Cancelled', 'Fraud'])) { $aboneBitis = $service->service_termination_date ?: $client->abone_bitis_tarihi; } elseif (in_array($client->client_status, ['Closed', 'Inactive']) && !$aboneBitis) { $aboneBitis = $client->abone_bitis_tarihi; } $line[] = $aboneBitis ? date('YmdHis', strtotime($aboneBitis)) : '00000000000000'; $line[] = mb_strtoupper($client->firstname ?? '', 'UTF-8'); $line[] = mb_strtoupper($client->lastname ?? '', 'UTF-8'); $line[] = $client->abone_tc_kimlik_no ?: ''; $line[] = $client->abone_pasaport_no ?: ''; $line[] = mb_strtoupper($client->abone_unvan ?: $client->companyname ?: '', 'UTF-8'); $line[] = $client->abone_vergi_numarasi ?: (($client->musteri_tipi_kodu ?? '') !== 'B' && ($client->musteri_tipi_kodu ?? '') !== 'BY' ? $client->whmcs_tax_id : ''); $line[] = $client->abone_mersis_numarasi ?: ''; $line[] = $client->abone_cinsiyet ?: ''; $line[] = $client->abone_uyruk_iso_kodu ?: ($client->whmcs_country ?: ''); $line[] = mb_strtoupper($client->abone_baba_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($client->abone_ana_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($client->abone_anne_kizlik_soyadi ?: '', 'UTF-8'); $line[] = mb_strtoupper($client->abone_dogum_yeri ?: '', 'UTF-8'); $line[] = $client->abone_dogum_tarihi ? date('Y-m-d', strtotime($client->abone_dogum_tarihi)) : '0000-00-00'; $line[] = mb_strtoupper($client->abone_meslek ?: '', 'UTF-8'); $line[] = $client->abone_tarife ?: ($service->product_name ?: ''); $line[] = $client->abone_kimlik_cilt_no ?: '0'; $line[] = $client->abone_kimlik_kutuk_no ?: '0'; $line[] = $client->abone_kimlik_sayfa_no ?: '0'; $kimlikIlAdi = $client->abone_kimlik_il_id ? Capsule::table('mod_btk_iller')->where('id', $client->abone_kimlik_il_id)->value('il_adi') : ''; $kimlikIlceAdi = $client->abone_kimlik_ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $client->abone_kimlik_ilce_id)->value('ilce_adi') : ''; $line[] = mb_strtoupper($kimlikIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($kimlikIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($client->abone_kimlik_mahalle_koy ?: '', 'UTF-8'); $line[] = $client->abone_kimlik_tipi_kodu ?: ''; $line[] = $client->abone_kimlik_seri_no ?: ''; $line[] = mb_strtoupper($client->abone_kimlik_verildigi_yer ?: '', 'UTF-8'); $line[] = $client->abone_kimlik_verildigi_tarih ? date('Y-m-d', strtotime($client->abone_kimlik_verildigi_tarih)) : '0000-00-00'; $line[] = $client->abone_kimlik_aidiyeti_kodu ?: ''; $tesisAdresi = null; if ($service->tesis_adresi_id) { $tesisAdresi = Capsule::table('mod_btk_adresler')->where('id', $service->tesis_adresi_id)->first(); } elseif ($service->tesis_adresi_yerlesimle_ayni && $client->yerlesim_adresi_id) { $tesisAdresi = Capsule::table('mod_btk_adresler')->where('id', $client->yerlesim_adresi_id)->first(); } $tesisIlAdi = $tesisAdresi && $tesisAdresi->il_id ? Capsule::table('mod_btk_iller')->where('id', $tesisAdresi->il_id)->value('il_adi') : ''; $tesisIlceAdi = $tesisAdresi && $tesisAdresi->ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $tesisAdresi->ilce_id)->value('ilce_adi') : ''; $tesisMahalleAdi = $tesisAdresi && $tesisAdresi->mahalle_id ? Capsule::table('mod_btk_mahalleler')->where('id', $tesisAdresi->mahalle_id)->value('mahalle_adi') : ''; $line[] = mb_strtoupper($tesisIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisMahalleAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->csbm ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->dis_kapi_no ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->ic_kapi_no ?: '') : '', 'UTF-8'); $line[] = $tesisAdresi ? ($tesisAdresi->posta_kodu ?: '') : ''; $line[] = $tesisAdresi ? ($tesisAdresi->adres_kodu_uavt ?: '0') : '0'; $line[] = $client->irtibat_tel_no_1 ?: $client->whmcs_phone ?: ''; $line[] = $client->irtibat_tel_no_2 ?: ''; $line[] = $client->irtibat_email ?: $client->whmcs_email ?: ''; $yerlesimAdresi = null; if ($client->yerlesim_adresi_id) { $yerlesimAdresi = Capsule::table('mod_btk_adresler')->where('id', $client->yerlesim_adresi_id)->first(); } $yerlesimIlAdi = $yerlesimAdresi && $yerlesimAdresi->il_id ? Capsule::table('mod_btk_iller')->where('id', $yerlesimAdresi->il_id)->value('il_adi') : ''; $yerlesimIlceAdi = $yerlesimAdresi && $yerlesimAdresi->ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $yerlesimAdresi->ilce_id)->value('ilce_adi') : ''; $yerlesimMahalleAdi = $yerlesimAdresi && $yerlesimAdresi->mahalle_id ? Capsule::table('mod_btk_mahalleler')->where('id', $yerlesimAdresi->mahalle_id)->value('mahalle_adi') : ''; $line[] = mb_strtoupper($yerlesimIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimMahalleAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->csbm ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->dis_kapi_no ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->ic_kapi_no ?: '') : '', 'UTF-8'); $line[] = $yerlesimAdresi ? ($yerlesimAdresi->adres_kodu_uavt ?: '0') : '0'; $line[] = mb_strtoupper($client->kurum_yetkili_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($client->kurum_yetkili_soyadi ?: '', 'UTF-8'); $line[] = $client->kurum_yetkili_tckimlik_no ?: '0'; $line[] = $client->kurum_yetkili_telefon ?: ''; $kurumAdresi = null; if ($client->kurum_adresi_id) { $kurumAdresi = Capsule::table('mod_btk_adresler')->where('id', $client->kurum_adresi_id)->first(); } $kurumAdresFormatli = $kurumAdresi ? btkreports_format_address_for_report((array)$kurumAdresi) : ($yerlesimAdresi ? btkreports_format_address_for_report((array)$yerlesimAdresi) : ''); $line[] = mb_strtoupper($kurumAdresFormatli, 'UTF-8'); $line[] = $service->aktivasyon_bayi_adi ?: ''; $line[] = $service->aktivasyon_bayi_adresi ?: ''; $line[] = $service->aktivasyon_kullanici ?: ''; $line[] = $service->guncelleyen_bayi_adi ?: ''; $line[] = $service->guncelleyen_bayi_adresi ?: ''; $line[] = $service->guncelleyen_kullanici ?: ''; $line[] = $service->statik_ip ?: $service->service_dedicatedip ?: ''; $line[] = $service->iss_hiz_profili ?: ''; $line[] = $service->iss_kullanici_adi ?: $service->service_username ?: ''; $line[] = $service->iss_pop_bilgisi ?: ''; $lines[] = implode($separator, array_map(function($value) { return $value === null ? '' : $value; }, $line)); } } if (empty($lines) && ($config['send_empty_file'] ?? '0') === '1') { $fileContent = ""; if (function_exists('btkreports_log_activity')) btkreports_log_activity("REHBER Generation: No data, sending empty file as per config.", 0, null, "INFO"); } elseif (empty($lines)) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("REHBER Generation: No data to report, send_empty_file is off.", 0, null, "INFO"); return [null, null]; } else { $fileContent = implode($newLine, $lines) . $newLine; } $fileName = "REHBER_" . $operatorCode . "_" . date('YmdHis') . ".abn"; return [$fileName, $fileContent]; } }
if (!function_exists('btkreports_generate_hareket_file')) { function btkreports_generate_hareket_file($config, $baslangicTarih = null, $bitisTarih = null, $isManual = false) { global $_ADDONLANG; $operatorCode = $config['operator_code'] ?? '000'; $lines = []; $separator = '|;|'; $newLine = "\n"; $query = Capsule::table('mod_btk_hareketler')->join('tblclients', 'mod_btk_hareketler.client_id', '=', 'tblclients.id')->leftJoin('mod_btk_clients', 'mod_btk_hareketler.client_id', '=', 'mod_btk_clients.client_id')->leftJoin('tblhosting', 'mod_btk_hareketler.service_id', '=', 'tblhosting.id')->leftJoin('mod_btk_services', 'mod_btk_hareketler.service_id', '=', 'mod_btk_services.service_id')->leftJoin('tblproducts', 'tblhosting.packageid', '=', 'tblproducts.id')->leftJoin('mod_btk_product_mappings', 'tblproducts.gid', '=', 'mod_btk_product_mappings.whmcs_product_group_id')->select( 'mod_btk_hareketler.id as hareket_id', 'mod_btk_hareketler.musteri_hareket_kodu', 'mod_btk_hareketler.musteri_hareket_aciklama', 'mod_btk_hareketler.hareket_zamani', 'tblclients.id as whmcs_client_id', 'tblclients.firstname', 'tblclients.lastname', 'tblclients.companyname', 'tblclients.email as whmcs_email', 'tblclients.phonenumber as whmcs_phone', 'tblclients.tax_id as whmcs_tax_id', 'tblclients.status as client_status', 'tblclients.country as whmcs_country', 'tblclients.datecreated as client_datecreated', 'mod_btk_clients.*', 'tblhosting.id as whmcs_service_id', 'tblhosting.userid as whmcs_user_id_service', 'tblhosting.regdate as service_regdate', 'tblhosting.domainstatus as service_status', 'tblhosting.termination_date as service_termination_date', 'tblhosting.dedicatedip as service_dedicatedip', 'tblhosting.username as service_username', 'mod_btk_services.*', 'mod_btk_product_mappings.btk_yetki_turu_kodu as mapped_yetki_kodu', 'mod_btk_product_mappings.default_btk_hizmet_tipi_kodu as mapped_hizmet_tipi', 'tblproducts.name as product_name' ); if (!$isManual) { $query->where('mod_btk_hareketler.raporlandi_mi', false); } if ($baslangicTarih) { $query->where('mod_btk_hareketler.hareket_zamani', '>=', $baslangicTarih); } if ($bitisTarih) { $query->where('mod_btk_hareketler.hareket_zamani', '<=', $bitisTarih); } $hareketler = $query->orderBy('mod_btk_hareketler.hareket_zamani', 'asc')->get(); if ($hareketler->isEmpty() && ($config['send_empty_file'] ?? '0') !== '1') { if (function_exists('btkreports_log_activity')) btkreports_log_activity("HAREKET Generation: No new movements found and send_empty_file is off.", 0, null, "INFO"); return [null, null]; } $hareketIdsToMark = []; foreach ($hareketler as $hareket) { $line = []; $line[] = $operatorCode; $line[] = $hareket->whmcs_client_id; $line[] = $hareket->whmcs_service_id ?: $hareket->whmcs_client_id; $hatDurum = $hareket->hat_durum_kodu ?: btkreports_map_whmcs_status_to_btk_hat_durum($hareket->service_status); $hatDurumKoduAciklama = Capsule::table('mod_btk_hat_durum_kodlari')->where('kod', $hatDurum)->first(); $line[] = $hatDurumKoduAciklama ? $hatDurumKoduAciklama->durum_adi : 'AKTIF'; $line[] = $hatDurum ?: '1'; $line[] = $hareket->hat_aciklama ?: ($hatDurumKoduAciklama ? mb_strtoupper($hatDurumKoduAciklama->aciklama, 'UTF-8') : 'AKTIF'); $line[] = $hareket->musteri_hareket_kodu; $line[] = mb_strtoupper($hareket->musteri_hareket_aciklama ?: '', 'UTF-8'); $line[] = date('YmdHis', strtotime($hareket->hareket_zamani)); $hizmetTipi = $hareket->override_hizmet_tipi_kodu ?: $hareket->mapped_hizmet_tipi ?: ''; $line[] = $hizmetTipi; $line[] = $hareket->musteri_tipi_kodu ?: ''; $aboneBaslangic = $hareket->abone_baslangic_tarihi ?: ($hareket->service_regdate ?: $hareket->client_datecreated); $line[] = $aboneBaslangic ? date('YmdHis', strtotime($aboneBaslangic)) : '00000000000000'; $aboneBitis = null; if (in_array($hareket->service_status, ['Terminated', 'Cancelled', 'Fraud'])) { $aboneBitis = $hareket->service_termination_date ?: $hareket->abone_bitis_tarihi; } elseif (in_array($hareket->client_status, ['Closed', 'Inactive']) && !$aboneBitis) { $aboneBitis = $hareket->abone_bitis_tarihi; } $line[] = $aboneBitis ? date('YmdHis', strtotime($aboneBitis)) : '00000000000000'; $line[] = mb_strtoupper($hareket->firstname ?? '', 'UTF-8'); $line[] = mb_strtoupper($hareket->lastname ?? '', 'UTF-8'); $line[] = $hareket->abone_tc_kimlik_no ?: ''; $line[] = $hareket->abone_pasaport_no ?: ''; $line[] = mb_strtoupper($hareket->abone_unvan ?: $hareket->companyname ?: '', 'UTF-8'); $line[] = $hareket->abone_vergi_numarasi ?: (($hareket->musteri_tipi_kodu ?? '') !== 'B' && ($hareket->musteri_tipi_kodu ?? '') !== 'BY' ? $hareket->whmcs_tax_id : ''); $line[] = $hareket->abone_mersis_numarasi ?: ''; $line[] = $hareket->abone_cinsiyet ?: ''; $line[] = $hareket->abone_uyruk_iso_kodu ?: ($hareket->whmcs_country ?: ''); $line[] = mb_strtoupper($hareket->abone_baba_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($hareket->abone_ana_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($hareket->abone_anne_kizlik_soyadi ?: '', 'UTF-8'); $line[] = mb_strtoupper($hareket->abone_dogum_yeri ?: '', 'UTF-8'); $line[] = $hareket->abone_dogum_tarihi ? date('Y-m-d', strtotime($hareket->abone_dogum_tarihi)) : '0000-00-00'; $line[] = mb_strtoupper($hareket->abone_meslek ?: '', 'UTF-8'); $line[] = $hareket->abone_tarife ?: ($hareket->product_name ?: ''); $line[] = $hareket->abone_kimlik_cilt_no ?: '0'; $line[] = $hareket->abone_kimlik_kutuk_no ?: '0'; $line[] = $hareket->abone_kimlik_sayfa_no ?: '0'; $kimlikIlAdi = $hareket->abone_kimlik_il_id ? Capsule::table('mod_btk_iller')->where('id', $hareket->abone_kimlik_il_id)->value('il_adi') : ''; $kimlikIlceAdi = $hareket->abone_kimlik_ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $hareket->abone_kimlik_ilce_id)->value('ilce_adi') : ''; $line[] = mb_strtoupper($kimlikIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($kimlikIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($hareket->abone_kimlik_mahalle_koy ?: '', 'UTF-8'); $line[] = $hareket->abone_kimlik_tipi_kodu ?: ''; $line[] = $hareket->abone_kimlik_seri_no ?: ''; $line[] = mb_strtoupper($hareket->abone_kimlik_verildigi_yer ?: '', 'UTF-8'); $line[] = $hareket->abone_kimlik_verildigi_tarih ? date('Y-m-d', strtotime($hareket->abone_kimlik_verildigi_tarih)) : '0000-00-00'; $line[] = $hareket->abone_kimlik_aidiyeti_kodu ?: ''; $tesisAdresi = null; if ($hareket->tesis_adresi_id) { $tesisAdresi = Capsule::table('mod_btk_adresler')->where('id', $hareket->tesis_adresi_id)->first(); } elseif ($hareket->tesis_adresi_yerlesimle_ayni && $hareket->yerlesim_adresi_id) { $tesisAdresi = Capsule::table('mod_btk_adresler')->where('id', $hareket->yerlesim_adresi_id)->first(); } $tesisIlAdi = $tesisAdresi && $tesisAdresi->il_id ? Capsule::table('mod_btk_iller')->where('id', $tesisAdresi->il_id)->value('il_adi') : ''; $tesisIlceAdi = $tesisAdresi && $tesisAdresi->ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $tesisAdresi->ilce_id)->value('ilce_adi') : ''; $tesisMahalleAdi = $tesisAdresi && $tesisAdresi->mahalle_id ? Capsule::table('mod_btk_mahalleler')->where('id', $tesisAdresi->mahalle_id)->value('mahalle_adi') : ''; $line[] = mb_strtoupper($tesisIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisMahalleAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->csbm ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->dis_kapi_no ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($tesisAdresi ? ($tesisAdresi->ic_kapi_no ?: '') : '', 'UTF-8'); $line[] = $tesisAdresi ? ($tesisAdresi->posta_kodu ?: '') : ''; $line[] = $tesisAdresi ? ($tesisAdresi->adres_kodu_uavt ?: '0') : '0'; $line[] = $hareket->irtibat_tel_no_1 ?: $hareket->whmcs_phone ?: ''; $line[] = $hareket->irtibat_tel_no_2 ?: ''; $line[] = $hareket->irtibat_email ?: $hareket->whmcs_email ?: ''; $yerlesimAdresi = null; if ($hareket->yerlesim_adresi_id) { $yerlesimAdresi = Capsule::table('mod_btk_adresler')->where('id', $hareket->yerlesim_adresi_id)->first(); } $yerlesimIlAdi = $yerlesimAdresi && $yerlesimAdresi->il_id ? Capsule::table('mod_btk_iller')->where('id', $yerlesimAdresi->il_id)->value('il_adi') : ''; $yerlesimIlceAdi = $yerlesimAdresi && $yerlesimAdresi->ilce_id ? Capsule::table('mod_btk_ilceler')->where('id', $yerlesimAdresi->ilce_id)->value('ilce_adi') : ''; $yerlesimMahalleAdi = $yerlesimAdresi && $yerlesimAdresi->mahalle_id ? Capsule::table('mod_btk_mahalleler')->where('id', $yerlesimAdresi->mahalle_id)->value('mahalle_adi') : ''; $line[] = mb_strtoupper($yerlesimIlAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimIlceAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimMahalleAdi ?: '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->csbm ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->dis_kapi_no ?: '') : '', 'UTF-8'); $line[] = mb_strtoupper($yerlesimAdresi ? ($yerlesimAdresi->ic_kapi_no ?: '') : '', 'UTF-8'); $line[] = $yerlesimAdresi ? ($yerlesimAdresi->adres_kodu_uavt ?: '0') : '0'; $line[] = mb_strtoupper($hareket->kurum_yetkili_adi ?: '', 'UTF-8'); $line[] = mb_strtoupper($hareket->kurum_yetkili_soyadi ?: '', 'UTF-8'); $line[] = $hareket->kurum_yetkili_tckimlik_no ?: '0'; $line[] = $hareket->kurum_yetkili_telefon ?: ''; $kurumAdresi = null; if ($hareket->kurum_adresi_id) { $kurumAdresi = Capsule::table('mod_btk_adresler')->where('id', $hareket->kurum_adresi_id)->first(); } $kurumAdresFormatli = $kurumAdresi ? btkreports_format_address_for_report((array)$kurumAdresi) : ($yerlesimAdresi ? btkreports_format_address_for_report((array)$yerlesimAdresi) : ''); $line[] = mb_strtoupper($kurumAdresFormatli, 'UTF-8'); $line[] = $hareket->aktivasyon_bayi_adi ?: ''; $line[] = $hareket->aktivasyon_bayi_adresi ?: ''; $line[] = $hareket->aktivasyon_kullanici ?: ''; $line[] = $hareket->guncelleyen_bayi_adi ?: ''; $line[] = $hareket->guncelleyen_bayi_adresi ?: ''; $line[] = $hareket->guncelleyen_kullanici ?: ''; $line[] = $hareket->statik_ip ?: $hareket->service_dedicatedip ?: ''; $line[] = $hareket->iss_hiz_profili ?: ''; $line[] = $hareket->iss_kullanici_adi ?: $hareket->service_username ?: ''; $line[] = $hareket->iss_pop_bilgisi ?: ''; $lines[] = implode($separator, array_map(function($value) { return $value === null ? '' : $value; }, $line)); $hareketIdsToMark[] = $hareket->hareket_id; } if (empty($lines) && ($config['send_empty_file'] ?? '0') === '1') { $fileContent = ""; if (function_exists('btkreports_log_activity')) btkreports_log_activity("HAREKET Generation: No new movements, sending empty file as per config.", 0, null, "INFO"); } elseif (empty($lines)) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("HAREKET Generation: No new movements to report, send_empty_file is off.", 0, null, "INFO"); return [null, null]; } else { $fileContent = implode($newLine, $lines) . $newLine; } $fileName = "HAREKET_" . $operatorCode . "_" . date('YmdHis') . ".abn"; if (!$isManual && !empty($hareketIdsToMark) && $fileContent !== null) { try { Capsule::table('mod_btk_hareketler')->whereIn('id', $hareketIdsToMark)->update(['raporlandi_mi' => true, 'raporlanma_zamani' => date('Y-m-d H:i:s'), 'rapor_dosya_adi' => $fileName]); if (function_exists('btkreports_log_activity')) btkreports_log_activity("HAREKET Generation: Marked " . count($hareketIdsToMark) . " movements as reported.", 0, null, "INFO"); } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("HAREKET Generation ERROR: Could not mark movements - " . $e->getMessage(), 0, null, "ERROR"); } } return [$fileName, $fileContent]; } }
if (!function_exists('btkreports_map_whmcs_status_to_btk_hat_durum')) { function btkreports_map_whmcs_status_to_btk_hat_durum($whmcsStatus) { switch (strtolower($whmcsStatus ?? '')) { case 'active': return '1'; case 'suspended': return '16'; case 'terminated': case 'cancelled': return '3'; case 'pending': return '1'; case 'fraud': return '4'; default: return '1'; } } }
if (!function_exists('btkreports_upload_to_ftp')) { function btkreports_upload_to_ftp($fileName, $fileContent, $config, $reportType) { global $_ADDONLANG; if ($fileContent === null && ($config['send_empty_file'] ?? '0') !== '1') { return ['success' => false, 'message' => ($reportType === 'hareket' ? ($_ADDONLANG['btkreports_empty_report_not_sent'] ?? 'Raporlanacak hareket bulunamadı.') : ($_ADDONLANG['btkreports_empty_report_not_sent'] ?? 'Raporlanacak abone bulunamadı.'))]; } $ftpHost = $config['ftp_host'] ?? ''; $ftpUsername = $config['ftp_username'] ?? ''; $ftpPasswordDecrypted = $config['ftp_password_decrypted'] ?? ''; $ftpPathKey = ($reportType === 'rehber') ? 'ftp_rehber_path' : (($reportType === 'hareket') ? 'ftp_hareket_path' : 'personel_ftp_path'); $ftpPath = $config[$ftpPathKey] ?? (($reportType === 'personel') ? '/PERSONEL/' : '/'); if (empty($ftpHost) || empty($ftpUsername)) { return ['success' => false, 'message' => 'FTP ayarları eksik. Lütfen modül ayarlarını kontrol edin.']; } $gzFileName = ($reportType === 'personel') ? $fileName : str_replace('.abn', '.abn.gz', $fileName); $fileToSend = ($reportType === 'personel') ? (string)$fileContent : gzencode((string)$fileContent, 9); if ($fileToSend === false && strlen((string)$fileContent) > 0 && $reportType !== 'personel') { if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload ERROR: Gzip compression failed for {$fileName}", 0, null, "ERROR"); return ['success' => false, 'message' => 'Gzip sıkıştırma hatası: ' . $fileName]; } elseif ($fileToSend === false && strlen((string)$fileContent) == 0 && $reportType !== 'personel') { $fileToSend = gzencode("", 9); } $conn_id = @ftp_connect($ftpHost, 21, 15); if (!$conn_id) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload ERROR: Could not connect to {$ftpHost} for {$gzFileName}", 0, null, "ERROR"); return ['success' => false, 'message' => "FTP sunucusuna bağlanılamadı: " . $ftpHost]; } if (!@ftp_login($conn_id, $ftpUsername, $ftpPasswordDecrypted)) { @ftp_close($conn_id); if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload ERROR: Login failed for {$ftpHost} with username {$ftpUsername} for {$gzFileName}", 0, null, "ERROR"); return ['success' => false, 'message' => "FTP girişi başarısız. Kullanıcı adı veya şifre hatalı."]; } @ftp_pasv($conn_id, true); $remoteFilePath = rtrim($ftpPath, '/') . '/' . $gzFileName; $tempHandle = tmpfile(); if ($tempHandle === false) { @ftp_close($conn_id); if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload ERROR: Could not create temp file for {$gzFileName}", 0, null, "ERROR"); return ['success' => false, 'message' => "Geçici dosya oluşturulamadı."]; } fwrite($tempHandle, $fileToSend); fseek($tempHandle, 0); if (@ftp_fput($conn_id, $remoteFilePath, $tempHandle, FTP_BINARY)) { fclose($tempHandle); @ftp_close($conn_id); if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload SUCCESS: {$gzFileName} uploaded to {$ftpHost}{$remoteFilePath}", 0, null, "FTP"); return ['success' => true, 'message' => "Dosya başarıyla FTP'ye yüklendi: " . $gzFileName]; } else { $ftpError = error_get_last(); fclose($tempHandle); @ftp_close($conn_id); $errorDetail = $ftpError ? $ftpError['message'] : "Bilinmeyen FTP hatası."; if (function_exists('btkreports_log_activity')) btkreports_log_activity("FTP Upload ERROR: Could not upload {$gzFileName} to {$ftpHost}{$remoteFilePath}. Detail: {$errorDetail}", 0, null, "ERROR"); return ['success' => false, 'message' => "Dosya FTP'ye yüklenemedi: " . $gzFileName . ". Hata: " . $errorDetail]; } } }
if (!function_exists('btkreports_add_hareket_kaydi')) { function btkreports_add_hareket_kaydi($clientId, $serviceId, $hareketKodu, $hareketAciklama, $eskiDeger = null, $yeniDeger = null, $detay = null, $hookName = null) { try { $validHareketKodu = Capsule::table('mod_btk_musteri_hareket_kodlari')->where('kod', $hareketKodu)->exists(); if (!$validHareketKodu) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Add Hareket ERROR: Invalid hareket_kodu '{$hareketKodu}' for client_id={$clientId}", $clientId, $serviceId, "ERROR"); return; } Capsule::table('mod_btk_hareketler')->insert([ 'client_id' => $clientId, 'service_id' => $serviceId, 'musteri_hareket_kodu' => $hareketKodu, 'musteri_hareket_aciklama' => mb_substr($hareketAciklama, 0, 255), 'hareket_zamani' => date('Y-m-d H:i:s'), 'eski_deger' => $eskiDeger ? mb_substr((is_string($eskiDeger) ? $eskiDeger : json_encode($eskiDeger, JSON_UNESCAPED_UNICODE)), 0, 65535) : null, 'yeni_deger' => $yeniDeger ? mb_substr((is_string($yeniDeger) ? $yeniDeger : json_encode($yeniDeger, JSON_UNESCAPED_UNICODE)), 0, 65535) : null, 'detay' => $detay ? mb_substr((is_string($detay) ? $detay : json_encode($detay, JSON_UNESCAPED_UNICODE)), 0, 65535) : null, 'raporlandi_mi' => false, 'created_by_hook' => $hookName ? mb_substr($hookName, 0, 255) : null, ]); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Hareket Eklendi: client_id={$clientId}, service_id={$serviceId}, kod={$hareketKodu}, aciklama={$hareketAciklama}", $clientId, $serviceId, "HAREKET_LOG"); } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Add Hareket ERROR: client_id={$clientId} - " . $e->getMessage(), $clientId, $serviceId, "ERROR"); } } }

// ------------------------------------------------------------------
// ANA ÇIKIŞ FONKSİYONU (btkreports_output)
// ------------------------------------------------------------------
if (!function_exists('btkreports_output')) {
    function btkreports_output($vars)
    {
        global $_ADDONLANG, $CONFIG, $adminUsername;
        
        if (empty($_ADDONLANG) && file_exists(__DIR__ . '/lang/turkish.php')) {
            require_once __DIR__ . '/lang/turkish.php';
        }
        if (empty($_ADDONLANG)) { $_ADDONLANG = []; $_ADDONLANG['btkreports_modulename'] = 'BTK Abone Veri Raporlama (Dil Yüklenemedi - Output)';}

        $modulelink = $vars['modulelink'];
        $action = isset($_REQUEST['action']) ? _btkSanitizeString($_REQUEST['action']) : 'index'; 

        $csrfToken = '';
        if (function_exists('generate_token')) {
            $csrfToken = generate_token('plain');
        }

        $smarty = new Smarty();
        $smarty->assign('modulelink', $modulelink);
        $smarty->assign('_ADDONLANG', $_ADDONLANG);
        $smarty->assign('csrfToken', $csrfToken);
        
        $adminFolderName = btkreports_get_admin_folder_name();
        $adminBaseUrl = rtrim($CONFIG['SystemURL'], '/') . '/' . $adminFolderName . '/';
        $smarty->assign('admin_url', $adminBaseUrl);
        $smarty->assign('BASE_PATH_JS', $adminBaseUrl . 'templates/blend/js');
        $smarty->assign('BASE_PATH_CSS', $adminBaseUrl . 'templates/blend/css');

        $templateDir = __DIR__ . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR;
        $smarty->setTemplateDir($templateDir);
        $smartyCompileDir = $GLOBALS['smarty'] ? $GLOBALS['smarty']->getCompileDir() : (isset($GLOBALS['templates_compiledir']) ? $GLOBALS['templates_compiledir'] : sys_get_temp_dir());
        if ($smartyCompileDir && is_writable($smartyCompileDir)) {
            $smarty->setCompileDir($smartyCompileDir);
        } else {
            if (function_exists('logActivity')) logActivity("BTK Module Smarty Error: templates_c directory is not writable or not found. Path: " . ($smartyCompileDir ?: 'N/A'), 0);
        }
        
        $configDataForPage = btkreports_get_all_config();
        $configDataForPage['active_auth_types'] = isset($configDataForPage['active_auth_types']) ? json_decode($configDataForPage['active_auth_types'], true) : [];
        if (!is_array($configDataForPage['active_auth_types'])) $configDataForPage['active_auth_types'] = [];
        
        $smarty->assign('config_module_version', btkreports_config()['version']);

        $validateCsrf = function($tokenKey = "token") { 
            return check_token("WHMCS.admin.default"); // CSRF Kontrolü aktif
        };
        
        $nviUniqueTokenName = 'btk_nvi_csrf_' . substr(md5(uniqid(rand(), true)), 0, 10);
        if (function_exists('generate_token')) {
            $_SESSION[$nviUniqueTokenName] = generate_token('plain');
        } else {
            $_SESSION[$nviUniqueTokenName] = md5(uniqid(rand(), true) . session_id());
        }
        $smarty->assign('nviCsrfTokenName', $nviUniqueTokenName);
        $smarty->assign('nviCsrfTokenValue', $_SESSION[$nviUniqueTokenName]);
        $validateNviCsrf = function() { $tokenName = $_POST['nvi_token_name'] ?? ''; $tokenValue = $_POST['nvi_token_value'] ?? ''; if (!empty($tokenName) && !empty($tokenValue) && isset($_SESSION[$tokenName]) && $_SESSION[$tokenName] === $tokenValue) { unset($_SESSION[$tokenName]); return true; } if (function_exists('btkreports_log_activity')) btkreports_log_activity("NVI CSRF Validation Failed. Name: {$tokenName}, Value Sent: {$tokenValue}, Session Value: " . ($_SESSION[$tokenName] ?? 'Not Set'),0,null,'CSRF_FAIL'); return false; };

        try {
            $smarty->assign('_ADDONLANG', $_ADDONLANG); 

            if (isset($_SESSION['btkModuleSuccessMessage'])) { // Ana sayfada mesajı göster
                $smarty->assign('successMessage', $_SESSION['btkModuleSuccessMessage']);
                unset($_SESSION['btkModuleSuccessMessage']);
            }

            switch ($action) {
                case 'index':
                    $smarty->assign('config', (object)$configDataForPage);
                    $smarty->assign('ftp_status_initial_message', $_ADDONLANG['btkreports_ftp_status_checking'] ?? 'FTP durumu kontrol ediliyor...');
                    $smarty->display('index.tpl');
                    break;
                case 'config':
                    if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf() ) { 
                        
                        $operatorName = _btkSanitizeString($_POST['operatorName'] ?? '');
                        $operatorCode = _btkSanitizeString($_POST['operatorCode'] ?? '', true); 
                        $operatorUnvani = _btkSanitizeString($_POST['operator_unvani'] ?? '');
                        
                        $formErrors = [];
                        if (strlen($operatorCode) === 0) {
                            $formErrors[] = $_ADDONLANG['btkreports_config_operator_code_error_required'] ?? 'Operatör kodu boş bırakılamaz!';
                        } elseif (!preg_match('/^\d{3}$/', $operatorCode)) {
                             $formErrors[] = $_ADDONLANG['btkreports_config_operator_code_error_format'] ?? 'Operatör kodu 3 haneli bir sayı olmalıdır!';
                        }
                        if (empty(_btkSanitizeString($_POST['ftp_host'] ?? ''))) {
                            $formErrors[] = $_ADDONLANG['btkreports_config_ftp_host_error_required'] ?? 'FTP Sunucu Adresi boş bırakılamaz!';
                        }
                        if (empty(_btkSanitizeString($_POST['ftp_username'] ?? ''))) {
                            $formErrors[] = $_ADDONLANG['btkreports_config_ftp_username_error_required'] ?? 'FTP Kullanıcı Adı boş bırakılamaz!';
                        }

                        if (empty($formErrors)) {
                            $activeAuthTypes = isset($_POST['active_auth_types']) && is_array($_POST['active_auth_types']) ? array_map('_btkSanitizeString', $_POST['active_auth_types']) : [];
                            $ftpHost = _btkSanitizeString($_POST['ftp_host'] ?? '');
                            $ftpUsername = _btkSanitizeString($_POST['ftp_username'] ?? '');
                            $ftpPassword = $_POST['ftp_password']; 
                            $ftpRehberPath = _btkSanitizeString($_POST['ftp_rehber_path'] ?? '/REHBER/');
                            $ftpHareketPath = _btkSanitizeString($_POST['ftp_hareket_path'] ?? '/HAREKET/');
                            $personelFtpPath = _btkSanitizeString($_POST['personel_ftp_path'] ?? '/PERSONEL/');
                            $sendEmptyFile = isset($_POST['send_empty_file']) ? '1' : '0';
                            $deleteDataOnUninstall = isset($_POST['delete_data_on_uninstall']) ? '1' : '0';

                            btkreports_save_config('operator_name', $operatorName);
                            btkreports_save_config('operator_code', $operatorCode);
                            btkreports_save_config('operator_unvani', $operatorUnvani);
                            btkreports_save_config('active_auth_types', json_encode($activeAuthTypes));
                            btkreports_save_config('ftp_host', $ftpHost);
                            btkreports_save_config('ftp_username', $ftpUsername);
                            if (!empty($ftpPassword) && $ftpPassword !== '********') { $encryptedPassword = encrypt($ftpPassword); btkreports_save_config('ftp_password', $encryptedPassword); }
                            btkreports_save_config('ftp_rehber_path', $ftpRehberPath);
                            btkreports_save_config('ftp_hareket_path', $ftpHareketPath);
                            btkreports_save_config('personel_ftp_path', $personelFtpPath);
                            btkreports_save_config('send_empty_file', $sendEmptyFile);
                            btkreports_save_config('delete_data_on_uninstall', $deleteDataOnUninstall);
                            btkreports_save_config('last_config_update', date('Y-m-d H:i:s'));
                            
                            if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Config: Settings saved by admin " . btkreports_get_current_admin_username(), 0);
                            
                            // Ayarlar kaydedildikten sonra ana sayfaya yönlendir ve session ile mesaj taşı
                            $_SESSION['btkModuleSuccessMessage'] = $_ADDONLANG['btkreports_config_save_success'] ?? 'Ayarlar başarıyla kaydedildi.';
                            header("Location: " . $modulelink . "&action=index"); 
                            exit;

                        } else {
                             $smarty->assign('errorMessage', implode('<br>', $formErrors));
                            // Hata durumunda form verilerini tekrar yükle
                            $configDataForPage['operator_name'] = $operatorName;
                            $configDataForPage['operator_code'] = _btkSanitizeString($_POST['operatorCode'] ?? ''); 
                            $configDataForPage['operator_unvani'] = $operatorUnvani;
                            $configDataForPage['active_auth_types'] = isset($_POST['active_auth_types']) && is_array($_POST['active_auth_types']) ? array_map('_btkSanitizeString', $_POST['active_auth_types']) : [];
                            $configDataForPage['ftp_host'] = _btkSanitizeString($_POST['ftp_host'] ?? '');
                            $configDataForPage['ftp_username'] = _btkSanitizeString($_POST['ftp_username'] ?? '');
                            $configDataForPage['ftp_rehber_path'] = _btkSanitizeString($_POST['ftp_rehber_path'] ?? '/REHBER/');
                            $configDataForPage['ftp_hareket_path'] = _btkSanitizeString($_POST['ftp_hareket_path'] ?? '/HAREKET/');
                            $configDataForPage['personel_ftp_path'] = _btkSanitizeString($_POST['personel_ftp_path'] ?? '/PERSONEL/');
                            $configDataForPage['send_empty_file'] = isset($_POST['send_empty_file']) ? '1' : '0';
                            $configDataForPage['delete_data_on_uninstall'] = isset($_POST['delete_data_on_uninstall']) ? '1' : '0';
                        }
                    } 
                    // GET isteği için veya POST'ta hata varsa (yönlendirme olmazsa) formu göster
                    $smarty->assign('config', (object)$configDataForPage);
                    $allYetkiTurleri = Capsule::table('mod_btk_yetki_turleri')->orderBy('yetki_adi')->get();
                    $smarty->assign('allYetkiTurleri', $allYetkiTurleri);
                    $smarty->display('config.tpl');
                    break;
                
                case 'getFtpStatus': header('Content-Type: application/json'); $configCurrent = btkreports_get_all_config(); $ftpHost = $configCurrent['ftp_host'] ?? ''; $ftpUsername = $configCurrent['ftp_username'] ?? ''; $ftpPassword = $configCurrent['ftp_password_decrypted'] ?? ''; $ftpPath = $configCurrent['ftp_rehber_path'] ?? '/'; $result = ['success' => false, 'message' => ($_ADDONLANG['btkreports_ftp_status_passive'] ?? 'PASİF') . ' - ' . ($_ADDONLANG['btkreports_ftp_status_not_configured'] ?? 'Ayarlanmadı')]; if (!empty($ftpHost) && !empty($ftpUsername)) { $testResult = btkreports_test_ftp_connection($ftpHost, $ftpUsername, $ftpPassword, $ftpPath, false); if($testResult['success']){ $result = ['success' => true, 'message' => ($_ADDONLANG['btkreports_ftp_status_active'] ?? 'AKTİF')]; } else { $result['message'] = ($_ADDONLANG['btkreports_ftp_status_passive_error'] ?? 'PASİF (Bağlantı Hatası)') . ': ' . ($testResult['message'] ?? ''); } } echo json_encode($result); exit;
                case 'productGroupMappings': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { $mappings = isset($_POST['mappings']) && is_array($_POST['mappings']) ? $_POST['mappings'] : []; foreach ($mappings as $groupId => $map) { $sanitizedGroupId = (int)$groupId; $btkYetkiKodu = _btkSanitizeString($map['btk_yetki_turu_kodu']); $hizmetTipiKodu = !empty($map['default_btk_hizmet_tipi_kodu']) ? _btkSanitizeString($map['default_btk_hizmet_tipi_kodu']) : null; if ($sanitizedGroupId > 0 && !empty($btkYetkiKodu)) { Capsule::table('mod_btk_product_mappings')->updateOrInsert( ['whmcs_product_group_id' => $sanitizedGroupId], [ 'btk_yetki_turu_kodu' => $btkYetkiKodu, 'default_btk_hizmet_tipi_kodu' => $hizmetTipiKodu, 'last_updated' => date('Y-m-d H:i:s') ] ); } } $smarty->assign('successMessage', $_ADDONLANG['btkreports_pgmap_save_success'] ?? 'Eşleştirmeler kaydedildi.'); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Product Mappings: Saved by admin " . btkreports_get_current_admin_username(), 0); } $productGroups = Capsule::table('tblproductgroups')->leftJoin('mod_btk_product_mappings', 'tblproductgroups.id', '=', 'mod_btk_product_mappings.whmcs_product_group_id')->select('tblproductgroups.id as gid', 'tblproductgroups.name as groupname', 'mod_btk_product_mappings.btk_yetki_turu_kodu', 'mod_btk_product_mappings.default_btk_hizmet_tipi_kodu')->orderBy('tblproductgroups.order')->get(); $activeAuthTypes = $configDataForPage['active_auth_types']; $availableYetkiTurleri = Capsule::table('mod_btk_yetki_turleri')->whereIn('yetki_kodu', $activeAuthTypes)->orderBy('yetki_adi')->get(); $allHizmetTipleri = Capsule::table('mod_btk_hizmet_tipleri')->orderBy('deger_aciklama')->get(); $hizmetTipleriByYetki = []; foreach($allHizmetTipleri as $ht){ $assignedYetkiler = !empty($ht->yetki_turu_kodu) ? explode(',', $ht->yetki_turu_kodu) : $activeAuthTypes; foreach($assignedYetkiler as $yetkiKodu){ $yetkiKodu = trim($yetkiKodu); if(!in_array($yetkiKodu, $activeAuthTypes) && !empty($ht->yetki_turu_kodu)) continue; if(!isset($hizmetTipleriByYetki[$yetkiKodu])){ $hizmetTipleriByYetki[$yetkiKodu] = []; } $hizmetTipleriByYetki[$yetkiKodu][] = ['hizmet_turu' => $ht->hizmet_turu, 'deger_aciklama' => $ht->deger_aciklama]; } } $smarty->assign('config', (object)$configDataForPage); $smarty->assign('productGroups', $productGroups); $smarty->assign('availableYetkiTurleri', $availableYetkiTurleri); $smarty->assign('allHizmetTipleri', $allHizmetTipleri); $smarty->assign('hizmetTipleriByYetkiJson', json_encode($hizmetTipleriByYetki)); $smarty->display('product_group_mappings.tpl'); break;
                case 'getClientBtkDetails': $clientId = isset($_REQUEST['client_id']) ? (int)$_REQUEST['client_id'] : 0; if (!$clientId) { echo "Müşteri ID gerekli."; return; } btkreports_AdminAreaClientSummaryPageTab(['userid' => $clientId], $smarty, $modulelink); break;
                case 'saveClientBtkData': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { $clientId = isset($_POST['client_id']) ? (int)$_POST['client_id'] : 0; if (!$clientId) { /* Hata */ } else { $saveResult = btkreports_save_client_btk_data($_POST, $clientId); $redirectParams = $saveResult['success'] ? "&btktabaction=success&message=" . urlencode($saveResult['message']) : "&btktabaction=error&message=" . urlencode($saveResult['message']); header("Location: clientssummary.php?userid=" . $clientId . $redirectParams . "#btkModuleTab"); exit; } } $smarty->assign('config', (object)$configDataForPage); $smarty->display('index.tpl'); break;
                case 'getServiceBtkDetails': $serviceId = isset($_REQUEST['service_id']) ? (int)$_REQUEST['service_id'] : 0; $clientId = isset($_REQUEST['client_id']) ? (int)$_REQUEST['client_id'] : (Capsule::table('tblhosting')->where('id', $serviceId)->value('userid')); if (!$serviceId || !$clientId) { echo "Hizmet veya Müşteri ID gerekli."; return; } btkreports_AdminAreaViewProductDetailsPage(['serviceid' => $serviceId, 'userid' => $clientId], $smarty, $modulelink); break;
                case 'saveServiceBtkData': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { $serviceId = isset($_POST['service_id']) ? (int)$_POST['service_id'] : 0; $clientId = isset($_POST['client_id']) ? (int)$_POST['client_id'] : 0; if (!$serviceId || !$clientId) { /* Hata */ } else { $saveResult = btkreports_save_service_btk_data($_POST, $serviceId, $clientId); $redirectParams = $saveResult['success'] ? "&btkaction=success&message=" . urlencode($saveResult['message']) : "&btkaction=error&message=" . urlencode($saveResult['message']); header("Location: clientsservices.php?userid=" . $clientId . "&id=" . $serviceId . $redirectParams); exit; } } $smarty->assign('config', (object)$configDataForPage); $smarty->display('index.tpl'); break;
                case 'getIlceler': header('Content-Type: application/json'); $ilId = isset($_GET['il_id']) ? (int)$_GET['il_id'] : 0; if (!$ilId) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_ajax_address_error_il'] ?? 'İl seçilmedi.']); exit; } $ilceler = Capsule::table('mod_btk_ilceler')->where('il_id', $ilId)->orderBy('ilce_adi')->get(['id', 'ilce_adi']); if ($ilceler->isEmpty()) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_ajax_address_no_ilce_found'] ?? 'İlçe bulunamadı.']); } else { echo json_encode(['success' => true, 'ilceler' => $ilceler]); } exit;
                case 'getMahalleler': header('Content-Type: application/json'); $ilceId = isset($_GET['ilce_id']) ? (int)$_GET['ilce_id'] : 0; if (!$ilceId) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_ajax_address_error_ilce'] ?? 'İlçe seçilmedi.']); exit; } $mahalleler = Capsule::table('mod_btk_mahalleler')->where('ilce_id', $ilceId)->orderBy('mahalle_adi')->get(['id', 'mahalle_adi']); if ($mahalleler->isEmpty()) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_ajax_address_no_mahalle_found'] ?? 'Mahalle bulunamadı.']); } else { echo json_encode(['success' => true, 'mahalleler' => $mahalleler]); } exit;
                case 'nviTcknDogrula': header('Content-Type: application/json'); if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateNviCsrf()) { $tckn = _btkSanitizeString($_POST['tckn']); $ad = _btkSanitizeString($_POST['ad']); $soyad = _btkSanitizeString($_POST['soyad']); $dogumYili = (int)$_POST['dogum_yili']; $clientId = (int)$_POST['client_id']; if (empty($tckn) || empty($ad) || empty($soyad) || empty($dogumYili) || !$clientId) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_client_nvi_error_fill_fields_tckn']]); exit; } $nviClient = new NviSoapClient(); $result = $nviClient->TCKimlikNoDogrula($tckn, $ad, $soyad, $dogumYili); $nviStatusUpdate = ['nvi_tckn_durum' => $result, 'nvi_tckn_son_dogrulama' => date('Y-m-d H:i:s')]; Capsule::table('mod_btk_clients')->updateOrInsert(['client_id' => $clientId], $nviStatusUpdate); $logMsg = "NVI TCKN Dogrulama " . ($result ? "Basarili" : "Basarisiz") . ": client_id={$clientId}, TCKN={$tckn}"; if (function_exists('btkreports_log_activity')) btkreports_log_activity($logMsg, $clientId, null, $result ? 'NVI_SUCCESS' : 'NVI_FAIL'); echo json_encode(['success' => $result, 'message' => $result ? $_ADDONLANG['btkreports_client_nvi_tckn_success'] : $_ADDONLANG['btkreports_client_nvi_tckn_fail']]); } else { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_csrf_error'] ?? 'Geçersiz istek veya CSRF token.']); } exit;
                case 'nviYknDogrula': header('Content-Type: application/json'); if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateNviCsrf()) { $ykn = _btkSanitizeString($_POST['ykn']); $ad = _btkSanitizeString($_POST['ad']); $soyad = _btkSanitizeString($_POST['soyad']); $dogumGun = (int)$_POST['dogum_gun']; $dogumAy = (int)$_POST['dogum_ay']; $dogumYil = (int)$_POST['dogum_yil']; $clientId = (int)$_POST['client_id']; if (empty($ykn) || empty($ad) || empty($soyad) || empty($dogumGun) || empty($dogumAy) || empty($dogumYil) || !$clientId) { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_client_nvi_error_fill_fields_ykn']]); exit; } $nviClient = new NviSoapClient(); $result = $nviClient->YabanciKimlikNoDogrula($ykn, $ad, $soyad, $dogumGun, $dogumAy, $dogumYil); $nviStatusUpdate = ['nvi_ykn_durum' => $result, 'nvi_ykn_son_dogrulama' => date('Y-m-d H:i:s')]; Capsule::table('mod_btk_clients')->updateOrInsert(['client_id' => $clientId], $nviStatusUpdate); $logMsg = "NVI YKN Dogrulama " . ($result ? "Basarili" : "Basarisiz") . ": client_id={$clientId}, YKN={$ykn}"; if (function_exists('btkreports_log_activity')) btkreports_log_activity($logMsg, $clientId, null, $result ? 'NVI_SUCCESS' : 'NVI_FAIL'); echo json_encode(['success' => $result, 'message' => $result ? $_ADDONLANG['btkreports_client_nvi_ykn_success'] : $_ADDONLANG['btkreports_client_nvi_ykn_fail']]); } else { echo json_encode(['success' => false, 'message' => $_ADDONLANG['btkreports_csrf_error'] ?? 'Geçersiz istek veya CSRF token.']); } exit;
                case 'logs': $page = isset($_GET['page']) ? (int)$_GET['page'] : 1; $limit = 25; $offset = ($page - 1) * $limit; $logQuery = Capsule::table('mod_btk_logs'); $filterDesc = isset($_GET['filter_description']) ? _btkSanitizeString($_GET['filter_description']) : ''; $filterUser = isset($_GET['filter_username']) ? _btkSanitizeString($_GET['filter_username']) : ''; if (!empty($filterDesc)) { $logQuery->where('description', 'LIKE', '%' . $filterDesc . '%'); } if (!empty($filterUser)) { $adminUserDb = Capsule::table('tbladmins')->where('username', $filterUser)->first(['id']); if ($adminUserDb) { $logQuery->where('user_id', $adminUserDb->id); } else { $logQuery->where('user_id', -1); } } $smarty->assign('filter_description', $filterDesc); $smarty->assign('filter_username', $filterUser); $totalLogs = $logQuery->count(); $logs = $logQuery->orderBy('log_time', 'desc')->skip($offset)->take($limit)->get(); $adminIds = $logs->pluck('user_id')->filter()->unique()->toArray(); $admins = []; if (!empty($adminIds)) { $adminUsersResult = Capsule::table('tbladmins')->whereIn('id', $adminIds)->get(['id', 'username']); foreach ($adminUsersResult as $adminUserObj) { $admins[$adminUserObj->id] = $adminUserObj->username; } } $smarty->assign('logs', $logs); $smarty->assign('admins', $admins); $smarty->assign('totalPages', ceil($totalLogs / $limit)); $smarty->assign('currentPage', $page); if(isset($_GET['deletesuccess'])){ $smarty->assign('successMessage', $_ADDONLANG['btkreports_logs_delete_success']); } if(isset($_GET['deleteerror']) && isset($_GET['message'])){ $smarty->assign('errorMessage', ($_ADDONLANG['btkreports_logs_delete_error'] ?? 'Loglar silinirken hata: ') . _btkSanitizeString($_GET['message'])); } $smarty->assign('config', (object)$configDataForPage); $smarty->display('logs.tpl'); break;
                case 'deleteLogs': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { try { Capsule::table('mod_btk_logs')->truncate(); if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Logs: All logs deleted by admin " . btkreports_get_current_admin_username(), 0, null, 'INFO'); header("Location: " . $modulelink . "&action=logs&deletesuccess=1"); exit; } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Logs: Error deleting logs - " . $e->getMessage(), 0, null, 'ERROR'); header("Location: " . $modulelink . "&action=logs&deleteerror=1&message=".urlencode($e->getMessage())); exit; } } header("Location: " . $modulelink . "&action=logs"); exit;
                case 'generate': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { $reportType = _btkSanitizeString($_POST['report_type']); $generateAction = _btkSanitizeString($_POST['generate_action']); $fileName = null; $fileContent = null; $configDataCurrent = btkreports_get_all_config(); if ($reportType === 'rehber') { list($fileName, $fileContent) = btkreports_generate_rehber_file($configDataCurrent); } elseif ($reportType === 'hareket') { $hareketBaslangic = !empty($_POST['date_from']) ? _btkSanitizeString($_POST['date_from']) . ' 00:00:00' : null; $hareketBitis = !empty($_POST['date_to']) ? _btkSanitizeString($_POST['date_to']) . ' 23:59:59' : null; list($fileName, $fileContent) = btkreports_generate_hareket_file($configDataCurrent, $hareketBaslangic, $hareketBitis, true); } if ($fileName && $fileContent !== null) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Manual Generate: {$fileName} created.", 0); if ($generateAction === 'generate_download') { $gzFileName = str_replace('.abn', '.abn.gz', $fileName); $gzippedContent = gzencode((string)$fileContent, 9); if ($gzippedContent === false) { $smarty->assign('errorMessage', $_ADDONLANG['btkreports_generate_error'] . " Gzip sıkıştırma hatası."); } else { header('Content-Description: File Transfer'); header('Content-Type: application/gzip'); header('Content-Disposition: attachment; filename="' . $gzFileName . '"'); header('Expires: 0'); header('Cache-Control: must-revalidate'); header('Pragma: public'); header('Content-Length: ' . strlen($gzippedContent)); echo $gzippedContent; exit; } } elseif ($generateAction === 'generate_ftp') { $ftpResult = btkreports_upload_to_ftp($fileName, $fileContent, $configDataCurrent, $reportType); if ($ftpResult['success']) { $smarty->assign('successMessage', $_ADDONLANG['btkreports_generate_success_ftp'] . " (" . $fileName . ")"); } else { $smarty->assign('errorMessage', $_ADDONLANG['btkreports_generate_error'] . $ftpResult['message']); } } } else { $sendEmptyFileConfig = $configDataCurrent['send_empty_file'] ?? '0'; $fileContentIsNull = ($fileContent === null); $fileContentIsEmptyString = ($fileContent === ""); $noDataMessage = ($reportType === 'hareket' ? ($_ADDONLANG['btkreports_report_no_movement_data'] ?? "Raporlanacak hareket bulunamadı.") : ($_ADDONLANG['btkreports_report_no_subscriber_data'] ?? "Raporlanacak abone bulunamadı.")); $errorFileName = $fileName ?: 'BilinmeyenDosya.abn'; if ( ($fileContentIsNull || $fileContentIsEmptyString) && $sendEmptyFileConfig !== '1' ) { $smarty->assign('errorMessage', $_ADDONLANG['btkreports_generate_error'] . $noDataMessage); } elseif ($fileContentIsEmptyString && $sendEmptyFileConfig === '1') { if($generateAction === 'generate_ftp'){ $ftpResult = btkreports_upload_to_ftp($errorFileName, $fileContent, $configDataCurrent, $reportType); if ($ftpResult['success']) { $smarty->assign('successMessage', $_ADDONLANG['btkreports_generate_success_ftp'] . " (" . ($_ADDONLANG['btkreports_empty_file'] ?? 'Boş dosya') . ": " . $errorFileName . ")"); } else { $smarty->assign('errorMessage', $_ADDONLANG['btkreports_generate_error'] . $ftpResult['message']); } } elseif ($generateAction === 'generate_download'){ $smarty->assign('infoMessage', str_replace('{fileName}', $errorFileName, $_ADDONLANG['btkreports_empty_report_download_info'] ?? "Boş rapor dosyası oluşturuldu ({fileName}), indirmek için anlamlı değil.")); } } else { $smarty->assign('errorMessage', $_ADDONLANG['btkreports_generate_error'] . ($_ADDONLANG['btkreports_report_generation_failed'] ?? "Rapor oluşturulamadı.")); } } } $smarty->assign('config', (object)$configDataForPage); $smarty->display('generate.tpl'); break;
                case 'viewReadme': $readmePath = __DIR__ . DIRECTORY_SEPARATOR . 'README.md'; $readmeContent = ''; if (file_exists($readmePath)) { $readmeContent = file_get_contents($readmePath); } $smarty->assign('readme_content', $readmeContent); $smarty->assign('config', (object)$configDataForPage); $smarty->display('index.tpl'); break;
                case 'personelList': case 'syncPersonelSuccess': case 'syncPersonelError': case 'deletePersonelSuccess': case 'deletePersonelError': $personelListesi = Capsule::table('mod_btk_personel')->orderBy('adi')->orderBy('soyadi')->get(); $smarty->assign('personelListesi', $personelListesi); if ($action === 'syncPersonelSuccess') $smarty->assign('syncResultMsg', $_ADDONLANG['btkreports_personnel_sync_success_msg'] ?? 'Personel listesi başarıyla senkronize edildi.'); if ($action === 'syncPersonelError') $smarty->assign('syncResultMsg', $_ADDONLANG['btkreports_personnel_sync_error_msg'] ?? 'Personel senkronizasyonu sırasında hata oluştu.'); $smarty->assign('config', (object)$configDataForPage); $smarty->display('personel.tpl'); break;
                case 'personelEdit': $personelId = isset($_GET['pid']) ? (int)$_GET['pid'] : 0; $personelData = null; if ($personelId > 0) { $personelData = Capsule::table('mod_btk_personel')->find($personelId); } $smarty->assign('personelData', $personelData ? (object)$personelData : null); $smarty->assign('config', (object)$configDataForPage); $smarty->display('personel.tpl'); break;
                case 'savePersonelData': if ($_SERVER['REQUEST_METHOD'] === 'POST' && $validateCsrf()) { $pid = isset($_POST['pid']) ? (int)$_POST['pid'] : 0; $adminIdHidden = isset($_POST['admin_id_hidden']) ? (int)$_POST['admin_id_hidden'] : null; $dataToSave = [ 'firma_adi' => _btkSanitizeString($_POST['firma_adi'] ?? $configDataForPage['operator_unvani'] ?? ''), 'adi' => _btkSanitizeString($_POST['adi'] ?? ''), 'soyadi' => _btkSanitizeString($_POST['soyadi'] ?? ''), 'e_posta_adresi' => _btkSanitizeEmail($_POST['e_posta_adresi'] ?? ''), 'tc_kimlik_no' => _btkSanitizeString($_POST['tc_kimlik_no'] ?? '', true), 'unvan' => _btkSanitizeString($_POST['unvan'] ?? ''), 'calistigi_birim' => _btkSanitizeString($_POST['calistigi_birim'] ?? ''), 'mobil_telefonu' => _btkSanitizeString($_POST['mobil_telefonu'] ?? '', true), 'sabit_telefonu' => _btkSanitizeString($_POST['sabit_telefonu'] ?? '', true), 'ise_baslama_tarihi' => !empty($_POST['ise_baslama_tarihi']) ? _btkSanitizeString($_POST['ise_baslama_tarihi']) : null, 'isten_ayrilma_tarihi' => !empty($_POST['isten_ayrilma_tarihi']) ? _btkSanitizeString($_POST['isten_ayrilma_tarihi']) : null, 'is_birakma_nedeni' => _btkSanitizeString($_POST['is_birakma_nedeni'] ?? ''), 'acil_durum_kisi_iletisim' => _btkSanitizeString($_POST['acil_durum_kisi_iletisim'] ?? ''), 'btk_listesine_eklensin' => isset($_POST['btk_listesine_eklensin']) ? 1 : 0, 'updated_at' => date('Y-m-d H:i:s') ]; if (!$adminIdHidden && $pid == 0) { } $validationErrors = []; if (empty($dataToSave['adi'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_required'] . " (Adı)"; if (empty($dataToSave['soyadi'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_required'] . " (Soyadı)"; if (empty($dataToSave['e_posta_adresi']) || !filter_var($dataToSave['e_posta_adresi'], FILTER_VALIDATE_EMAIL)) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_email']; if (empty($dataToSave['tc_kimlik_no']) || !preg_match('/^\d{11}$/', $dataToSave['tc_kimlik_no'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_tckn']; if (empty($dataToSave['unvan'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_required'] . " (Ünvan)"; if (empty($dataToSave['calistigi_birim'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_required'] . " (Çalıştığı Birim)"; if (empty($dataToSave['mobil_telefonu']) || !preg_match('/^\d{10}$/', $dataToSave['mobil_telefonu'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_phone'] . " (Mobil)"; if (!empty($dataToSave['sabit_telefonu']) && !preg_match('/^\d{10}$/', $dataToSave['sabit_telefonu'])) $validationErrors[] = $_ADDONLANG['btkreports_personnel_validation_error_phone'] . " (Sabit)"; if (empty($validationErrors)) { try { if ($pid > 0) { Capsule::table('mod_btk_personel')->where('id', $pid)->update($dataToSave); } else { } $smarty->assign('saveResultSuccess', true); } catch (Exception $e) { $smarty->assign('saveResultError', $e->getMessage()); if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel kaydetme/güncelleme hatası: " . $e->getMessage(),0,null,'ERROR'); } } else { $smarty->assign('validation_errors', $validationErrors); $personelData = (object)$_POST; $smarty->assign('personelData', $personelData); } } $smarty->assign('config', (object)$configDataForPage); $smarty->display('personel.tpl'); break;
                case 'deletePersonel': if ($validateCsrf()) { $pid = isset($_GET['pid']) ? (int)$_GET['pid'] : 0; if ($pid > 0) { try { $personelToDelete = Capsule::table('mod_btk_personel')->where('id', $pid)->whereNull('admin_id')->first(); if ($personelToDelete) { Capsule::table('mod_btk_personel')->where('id', $pid)->delete(); if (function_exists('btkreports_log_activity')) btkreports_log_activity("Manuel personel silindi. Personel ID: " . $pid); header("Location: " . $modulelink . "&action=personelList&deletesuccess=1"); exit; } else { header("Location: " . $modulelink . "&action=personelList&deleteerror=notmanual"); exit; } } catch (Exception $e) { if (function_exists('btkreports_log_activity')) btkreports_log_activity("Personel silme hatası: " . $e->getMessage(),0,null,'ERROR'); header("Location: " . $modulelink . "&action=personelList&deleteerror=dberror"); exit; } } } header("Location: " . $modulelink . "&action=personelList"); exit;
                case 'syncPersonel': if ($validateCsrf()) { $syncResult = btkreports_sync_admins_to_personel(); $_SESSION['btk_sync_result_msg'] = $syncResult['message']; $_SESSION['btk_sync_success'] = $syncResult['success']; header("Location: " . $modulelink . "&action=personelList&syncstatus=" . ($syncResult['success'] ? 'ok' : 'fail')); exit; } header("Location: " . $modulelink . "&action=personelList"); exit;

                default:
                    $smarty->assign('config', (object)$configDataForPage);
                    $smarty->display('index.tpl');
                    break;
            }
        } catch (SmartyException $e) { 
            $errorMsg = "Smarty Template Hatası: " . $e->getMessage() . " - Action: " . $action . " - Template: " . (isset($e->template_resource) ? $e->template_resource : 'N/A'); 
            if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Output Smarty ERROR: " . $errorMsg, 0, null, 'ERROR'); 
            echo "Şablon yüklenirken bir hata oluştu (" . htmlspecialchars($action) . "). Sistem loglarını kontrol edin.";
        } catch (Exception $e) { 
            $errorMsg = "Genel PHP Hatası: " . $e->getMessage() . " - Action: " . $action . " - File: " . $e->getFile() . " - Line: " . $e->getLine(); 
            if (function_exists('btkreports_log_activity')) btkreports_log_activity("BTK Output General ERROR: " . $errorMsg, 0, null, 'ERROR'); 
            echo "Beklenmedik bir hata oluştu (" . htmlspecialchars($action) . "). Sistem loglarını kontrol edin."; 
        }
    }
}

if (!function_exists('btkreports_AdminAreaHeadOutput')) {
    function btkreports_AdminAreaHeadOutput($vars) {
        global $CONFIG;
        $moduleNameFromUrl = isset($_GET['module']) ? _btkSanitizeString($_GET['module']) : ''; 
        $output = '';
        if ($moduleNameFromUrl === 'btkreports') {
            $adminFolderName = btkreports_get_admin_folder_name();
            $whmcsBaseUrl = rtrim($CONFIG['SystemURL'], '/') . '/';
            $moduleAssetsPath = $whmcsBaseUrl . 'modules/addons/btkreports/assets/';
            $moduleConfig = btkreports_config();
            $moduleVersion = $moduleConfig['version'] ?? '1.0.0';

            $output .= '<script type="text/javascript">var btkModuleLink = "' . htmlspecialchars($vars['modulelink'], ENT_QUOTES, 'UTF-8') . '";</script>';
            $output .= '<script type="text/javascript">var btkCsrfToken = "' . (function_exists('generate_token') ? generate_token('plain') : '') . '";</script>';
            $jsLang = [];
            $keysToExport = [
                'btkreports_ftp_status_checking', 'btkreports_ftp_status_active', 'btkreports_ftp_status_passive',
                'btkreports_ftp_status_not_configured', 'btkreports_ftp_status_passive_error', 'btkreports_ftp_status_unknown',
                'btkreports_ftp_test_fail_ajax', 'btkreports_ftp_error_timeout', 'btkreports_ftp_error_unknown',
                'btkreports_config_ftp_testing', 'btkreports_personnel_sync_inprogress', 'btkreports_generating_report',
                'btkreports_select_option_ilce', 'btkreports_select_option_mahalle', 'btkreports_client_nvi_error_fill_fields_tckn',
                'btkreports_download_report', 'btkreports_error_unknown', 'btkreports_error_server_report_generation'
            ];
            global $_ADDONLANG; 
            if(empty($_ADDONLANG) && file_exists(__DIR__ . '/lang/turkish.php')) require_once __DIR__ . '/lang/turkish.php';

            foreach($keysToExport as $key) {
                $jsLang[$key] = $_ADDONLANG[$key] ?? $key; 
            }
            $output .= '<script type="text/javascript">var btkLang = ' . json_encode($jsLang) . ';</script>';

            $cssFilePath = $moduleAssetsPath . 'css/btk_admin_style.css';
            if (file_exists(dirname(__FILE__) . '/assets/css/btk_admin_style.css')) {
                 $output .= '<link href="' . htmlspecialchars($cssFilePath) . '?v=' . $moduleVersion . '" rel="stylesheet" type="text/css" />' . PHP_EOL;
            }

            $jsFilePath = $moduleAssetsPath . 'js/btk_admin_scripts.js';
            if (file_exists(dirname(__FILE__) . '/assets/js/btk_admin_scripts.js')) {
                 $output .= '<script type="text/javascript" src="' . htmlspecialchars($jsFilePath) . '?v=' . $moduleVersion . '"></script>' . PHP_EOL;
            }
        }
        return $output;
    }
}
?>